{
  "contentVersion": "1.0.0.0",
  "parameters": {
    "workbookDisplayName": {
      "type": "string",
      "defaultValue": "Azure VM Size Optimization v6",
      "metadata": {
        "description": "The friendly name for the workbook that is used in the Gallery or Saved List.  This name must be unique within a resource group."
      }
    },
    "workbookType": {
      "type": "string",
      "defaultValue": "workbook",
      "metadata": {
        "description": "The gallery that the workbook will been shown under. Supported values include workbook, tsg, etc. Usually, this is 'workbook'"
      }
    },
    "workbookSourceId": {
      "type": "string",
      "defaultValue": "Azure Monitor",
      "metadata": {
        "description": "The id of resource instance to which the workbook will be associated"
      }
    },
    "workbookId": {
      "type": "string",
      "defaultValue": "[newGuid()]",
      "metadata": {
        "description": "The unique guid for this workbook instance"
      }
    }
  },
  "resources": [
    {
      "name": "[parameters('workbookId')]",
      "type": "microsoft.insights/workbooks",
      "location": "[resourceGroup().location]",
      "apiVersion": "2018-06-17-preview",
      "dependsOn": [],
      "kind": "shared",
      "properties": {
        "displayName": "[parameters('workbookDisplayName')]",
           "serializedData": "{\"version\":\"Notebook/1.0\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## VM Usage and Size Recomendations v6\\n---\\n\\n\"},\"name\":\"text - 2\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"/subscriptions/2de20a16-20c6-41af-82cd-bceb39195d1c/resourceGroups/rg-shared-sc-weu/providers/Microsoft.OperationalInsights/workspaces/la-prod-sc-weu\"],\"parameters\":[{\"id\":\"073783b8-2700-4b6b-b23a-5edefdf72797\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRange\",\"type\":4,\"typeSettings\":{\"selectableValues\":[{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}],\"allowCustom\":true},\"value\":{\"durationMs\":2592000000}},{\"id\":\"191cdc7f-3689-4f79-8f3f-02114bdb2117\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"subscription\",\"type\":6,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"summarize by subscriptionId\\r\\n| project value = strcat('/subscriptions/', subscriptionId), label = subscriptionId\",\"crossComponentResources\":[\"value::all\"],\"value\":[\"/subscriptions/2de20a16-20c6-41af-82cd-bceb39195d1c\"],\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.resources/subscriptions\":true},\"additionalResourceOptions\":[]},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"e81ff94e-69db-4938-8bd3-b69b4e7dbddf\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Workspace\",\"type\":5,\"isRequired\":true,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"where type =~ 'microsoft.operationalinsights/workspaces'\\r\\n| summarize by id, name\\r\\n| project id\",\"crossComponentResources\":[\"{subscription}\"],\"value\":[\"/subscriptions/2de20a16-20c6-41af-82cd-bceb39195d1c/resourceGroups/rg-shared-sc-weu/providers/Microsoft.OperationalInsights/workspaces/la-prod-sc-weu\"],\"typeSettings\":{\"resourceTypeFilter\":{\"microsoft.operationalinsights/workspaces\":true},\"additionalResourceOptions\":[\"value::5\"]},\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\"},{\"id\":\"3b033277-2f8d-4db0-bfd1-e8c06c1ce531\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"rg\",\"label\":\"ResurceGroup\",\"type\":2,\"multiSelect\":true,\"quote\":\"'\",\"delimiter\":\",\",\"query\":\"Heartbeat\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend spltres=split(_ResourceId,'/')\\r\\n| where tostring(spltres[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| project rg=tostring(spltres[4])\\r\\n| distinct rg\\r\\n| sort by rg asc\",\"crossComponentResources\":[\"{Workspace}\"],\"typeSettings\":{\"additionalResourceOptions\":[\"value::all\"],\"selectAllValue\":\"*\"},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"value\":[\"value::all\"]},{\"id\":\"c7e1d207-877c-4f9d-8b4e-3c61c36a7628\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"PeakHourStart\",\"type\":2,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":1, \\\"label\\\":\\\"01:00\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":2, \\\"label\\\":\\\"02:00\\\", \\\"selected\\\": false },\\r\\n     { \\\"value\\\":3, \\\"label\\\":\\\"03:00\\\", \\\"selected\\\": false },\\r\\n      { \\\"value\\\":4, \\\"label\\\":\\\"04:00\\\", \\\"selected\\\": false },\\r\\n       { \\\"value\\\":5, \\\"label\\\":\\\"05:00\\\", \\\"selected\\\": false },\\r\\n        { \\\"value\\\":6, \\\"label\\\":\\\"06:00\\\", \\\"selected\\\": false },\\r\\n         { \\\"value\\\":7, \\\"label\\\":\\\"07:00\\\", \\\"selected\\\": false },\\r\\n          { \\\"value\\\":8, \\\"label\\\":\\\"08:00\\\", \\\"selected\\\": true },\\r\\n           { \\\"value\\\":9, \\\"label\\\":\\\"09:00\\\", \\\"selected\\\": false },\\r\\n            { \\\"value\\\":10, \\\"label\\\":\\\"10:00\\\", \\\"selected\\\": false },\\r\\n             { \\\"value\\\":11, \\\"label\\\":\\\"11:00\\\", \\\"selected\\\": false },\\r\\n   { \\\"value\\\":12, \\\"label\\\":\\\"12:00\\\", \\\"selected\\\": false },\\r\\n     { \\\"value\\\":13, \\\"label\\\":\\\"13:00\\\", \\\"selected\\\": false },\\r\\n      { \\\"value\\\":14, \\\"label\\\":\\\"14:00\\\", \\\"selected\\\": false },\\r\\n       { \\\"value\\\":15, \\\"label\\\":\\\"15:00\\\", \\\"selected\\\": false },\\r\\n        { \\\"value\\\":16, \\\"label\\\":\\\"16:00\\\", \\\"selected\\\": false },\\r\\n         { \\\"value\\\":17, \\\"label\\\":\\\"17:00\\\", \\\"selected\\\": false },\\r\\n          { \\\"value\\\":18, \\\"label\\\":\\\"18:00\\\", \\\"selected\\\": false },\\r\\n           { \\\"value\\\":19, \\\"label\\\":\\\"19:00\\\", \\\"selected\\\": false },\\r\\n              { \\\"value\\\":20, \\\"label\\\":\\\"20:00\\\", \\\"selected\\\": false },\\r\\n         { \\\"value\\\":21, \\\"label\\\":\\\"21:00\\\", \\\"selected\\\": false },\\r\\n          { \\\"value\\\":22, \\\"label\\\":\\\"22:00\\\", \\\"selected\\\": false },\\r\\n           { \\\"value\\\":23, \\\"label\\\":\\\"23:00\\\", \\\"selected\\\": false }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"5222a485-3671-494c-8c7e-7f89682ef3f7\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"PeakHourEnd\",\"type\":2,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":1, \\\"label\\\":\\\"01:00\\\", \\\"selected\\\": false },\\r\\n    { \\\"value\\\":2, \\\"label\\\":\\\"02:00\\\", \\\"selected\\\": false },\\r\\n     { \\\"value\\\":3, \\\"label\\\":\\\"03:00\\\", \\\"selected\\\": false },\\r\\n      { \\\"value\\\":4, \\\"label\\\":\\\"04:00\\\", \\\"selected\\\": false },\\r\\n       { \\\"value\\\":5, \\\"label\\\":\\\"05:00\\\", \\\"selected\\\": false },\\r\\n        { \\\"value\\\":6, \\\"label\\\":\\\"06:00\\\", \\\"selected\\\": false },\\r\\n         { \\\"value\\\":7, \\\"label\\\":\\\"07:00\\\", \\\"selected\\\": false },\\r\\n          { \\\"value\\\":8, \\\"label\\\":\\\"08:00\\\", \\\"selected\\\": false },\\r\\n           { \\\"value\\\":9, \\\"label\\\":\\\"09:00\\\", \\\"selected\\\": false },\\r\\n            { \\\"value\\\":10, \\\"label\\\":\\\"10:00\\\", \\\"selected\\\": false },\\r\\n             { \\\"value\\\":11, \\\"label\\\":\\\"11:00\\\", \\\"selected\\\": false },\\r\\n   { \\\"value\\\":12, \\\"label\\\":\\\"12:00\\\", \\\"selected\\\": false },\\r\\n     { \\\"value\\\":13, \\\"label\\\":\\\"13:00\\\", \\\"selected\\\": false },\\r\\n      { \\\"value\\\":14, \\\"label\\\":\\\"14:00\\\", \\\"selected\\\": false },\\r\\n       { \\\"value\\\":15, \\\"label\\\":\\\"15:00\\\", \\\"selected\\\": false },\\r\\n        { \\\"value\\\":16, \\\"label\\\":\\\"16:00\\\", \\\"selected\\\": false },\\r\\n         { \\\"value\\\":17, \\\"label\\\":\\\"17:00\\\", \\\"selected\\\": true },\\r\\n          { \\\"value\\\":18, \\\"label\\\":\\\"18:00\\\", \\\"selected\\\": false },\\r\\n           { \\\"value\\\":19, \\\"label\\\":\\\"19:00\\\", \\\"selected\\\": false },\\r\\n              { \\\"value\\\":20, \\\"label\\\":\\\"20:00\\\", \\\"selected\\\": false },\\r\\n         { \\\"value\\\":21, \\\"label\\\":\\\"21:00\\\", \\\"selected\\\": false },\\r\\n          { \\\"value\\\":22, \\\"label\\\":\\\"22:00\\\", \\\"selected\\\": false },\\r\\n           { \\\"value\\\":23, \\\"label\\\":\\\"23:00\\\", \\\"selected\\\": false }\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.resourcegraph/resources\"},\"name\":\"parameters - 2\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"crossComponentResources\":[\"{Workspace}\"],\"parameters\":[{\"id\":\"eac9e917-6c40-4cb6-a2a5-f3c051ebfc84\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"VMInsightsEnabled\",\"type\":2,\"query\":\"VMComputer | take 1\",\"crossComponentResources\":[\"{Workspace}\"],\"isHiddenWhenLocked\":true,\"typeSettings\":{\"additionalResourceOptions\":[]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"e1c584fa-2400-4f74-8923-551614b84284\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"vminv\",\"type\":1,\"value\":\"let inv=VMComputer | summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId | project ResourceId , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB;\",\"isHiddenWhenLocked\":true,\"criteriaData\":[{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"param\",\"resultValType\":\"expression\",\"resultVal\":\"let inv=VMComputer | summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId | project ResourceId , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB;\"}}]},{\"id\":\"10125af8-3d2c-4744-893d-b69758549154\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"isSecurityEnabled\",\"type\":2,\"query\":\"SecurityEvent | take 1\",\"crossComponentResources\":[\"{Workspace}\"],\"isHiddenWhenLocked\":true,\"typeSettings\":{\"additionalResourceOptions\":[]},\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"showhidden\",\"comparison\":\"isNotEqualTo\"},\"name\":\"parameters - 2 - Copy\"},{\"type\":1,\"content\":{\"json\":\"### Select Subscription and TimeRange for Performance Analysis \\r\\n\\r\\nFor VM Inventory only last submitted data ( CPU , Memory , Azure Size) will be used.\\r\\n\\r\\nSelected Subscription :{subscription:label} \\r\\nSelected Resource Group : {rg}\\r\\n\"},\"name\":\"text - 3\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"where type == \\\"microsoft.compute/virtualmachines\\\"\\r\\n| where subscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| project ResourceId=id, location,  sku=tostring(properties.hardwareProfile.vmSize), OS=tostring(properties.storageProfile.osDisk.osType), resourceGroup,subscriptionId \\r\\n| summarize count() by  sku, subscriptionId\\r\\n\\r\\n\\r\\n\",\"size\":0,\"title\":\"Used VM Sizes for All Selected Subscriptions\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{subscription}\"],\"visualization\":\"tiles\",\"tileSettings\":{\"titleContent\":{\"columnMatch\":\"sku\",\"formatter\":1,\"formatOptions\":{}},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":8,\"formatOptions\":{\"palette\":\"yellowOrangeRed\"},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"showBorder\":false},\"graphSettings\":{\"type\":2,\"topContent\":{\"columnMatch\":\"sku\",\"formatter\":1,\"formatOptions\":{}},\"centerContent\":{\"columnMatch\":\"count_\",\"formatter\":1,\"formatOptions\":{},\"numberFormat\":{\"unit\":17,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2,\"maximumSignificantDigits\":3}}},\"hivesContent\":{\"columnMatch\":\"subscriptionId\",\"formatter\":1,\"formatOptions\":{}},\"nodeIdField\":\"sku\",\"nodeSize\":null,\"staticNodeSize\":100,\"colorSettings\":{\"nodeColorField\":\"count_\",\"type\":1,\"colorPalette\":\"default\"},\"groupByField\":\"subscriptionId\",\"hivesMargin\":10}},\"name\":\"query - 13 - Copy\"},{\"type\":1,\"content\":{\"json\":\"## Please select a Resource Group or select **ALL**   to see all VMS\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\\r\\n\",\"style\":\"warning\"},\"conditionalVisibility\":{\"parameterName\":\"rg\",\"comparison\":\"isEqualTo\"},\"name\":\"text - 11\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"VM Usage \",\"items\":[{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"e837027b-efd3-4287-b524-3a8f819e6022\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Usagequery\",\"type\":1,\"value\":\"let workstart=8; let workend=17; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated > ago(30d) | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ('2de20a16-20c6-41af-82cd-bceb39195d1c') or '*' in ('2de20a16-20c6-41af-82cd-bceb39195d1c') | where tostring(split(_ResourceId,'/')[4])  in ('*') or '*' in ('*') | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend MemUtil=(MemorySize-Val)/MemorySize*100 |summarize (mem_p95)=percentiles(MemUtil,95) by  Computer; let iops= InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (iops_p95)=percentiles(Val,95) by  Computer; let nwsent=InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)=percentiles(Val,95) by  Computer; let nwrec=InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)=percentiles(Val,95) by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union isfuzzy=true (Event | where TimeGenerated > ago(30d) | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=SecurityEvent | where EventID == 4624 | where LogonTypeName  ==\\\"10 - RemoteInteractive\\\"  | where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\" | summarize ['SSH/RDP']=count() by Computer |union  isfuzzy=true (Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer); let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer | join kind= leftouter (    vmcon ) on Computer |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,iops_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon  \\t\\t\\t          \",\"criteriaData\":[{\"condition\":\"if (isSecurityEnabled is not empty ), result = 'let workstart={PeakHourStart}; let workend={PeakHourEnd}; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated {TimeRange} | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ({subscription:subid}) or '*' in ({subscription:subid}) | where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg}) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend MemUtil=(MemorySize-Val)/MemorySize*100 |summarize (mem_p95)=percentiles(MemUtil,95) by  Computer; let iops= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (iops_p95)=percentiles(Val,95) by  Computer; let nwsent=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)=percentiles(Val,95) by  Computer; let nwrec=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)=percentiles(Val,95) by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union  isfuzzy=true (Event | where TimeGenerated {TimeRange} | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=SecurityEvent | where EventID == 4624 | where LogonTypeName  ==\\\"10 - RemoteInteractive\\\"  | where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\" | summarize ['SSH/RDP']=count() by Computer |union  isfuzzy=true (Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer); let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer | join kind= leftouter (    vmcon ) on Computer |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,iops_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon  \\t\\t\\t          '\",\"criteriaContext\":{\"leftOperand\":\"isSecurityEnabled\",\"operator\":\"isNotNull\",\"rightValType\":\"param\",\"resultValType\":\"static\",\"resultVal\":\"let workstart={PeakHourStart}; let workend={PeakHourEnd}; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated {TimeRange} | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ({subscription:subid}) or '*' in ({subscription:subid}) | where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg}) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend MemUtil=(MemorySize-Val)/MemorySize*100 |summarize (mem_p95)=percentiles(MemUtil,95) by  Computer; let iops= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (iops_p95)=percentiles(Val,95) by  Computer; let nwsent=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)=percentiles(Val,95) by  Computer; let nwrec=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)=percentiles(Val,95) by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union isfuzzy=true (Event | where TimeGenerated {TimeRange} | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=SecurityEvent | where EventID == 4624 | where LogonTypeName  ==\\\"10 - RemoteInteractive\\\"  | where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\" | summarize ['SSH/RDP']=count() by Computer |union  isfuzzy=true (Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer); let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer | join kind= leftouter (    vmcon ) on Computer |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,iops_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon  \\t\\t\\t          \"}},{\"condition\":\"else result = let workstart={PeakHourStart}; let workend={PeakHourEnd}; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated {TimeRange} | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ({subscription:subid}) or '*' in ({subscription:subid}) | where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg}) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend MemUtil=(MemorySize-Val)/MemorySize*100 |summarize (mem_p95)=percentiles(MemUtil,95) by  Computer; let iops= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (iops_p95)=percentiles(Val,95) by  Computer; let nwsent=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)=percentiles(Val,95) by  Computer; let nwrec=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)=percentiles(Val,95) by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union isfuzzy=true (Event | where TimeGenerated {TimeRange} | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer; let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer | join kind= leftouter (    vmcon ) on Computer |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,iops_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon\",\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"param\",\"resultValType\":\"expression\",\"resultVal\":\"let workstart={PeakHourStart}; let workend={PeakHourEnd}; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated {TimeRange} | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ({subscription:subid}) or '*' in ({subscription:subid}) | where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg}) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend MemUtil=(MemorySize-Val)/MemorySize*100 |summarize (mem_p95)=percentiles(MemUtil,95) by  Computer; let iops= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (iops_p95)=percentiles(Val,95) by  Computer; let nwsent=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)=percentiles(Val,95) by  Computer; let nwrec=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)=percentiles(Val,95) by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union isfuzzy=true (Event | where TimeGenerated {TimeRange} | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer; let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer | join kind= leftouter (    vmcon ) on Computer |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,iops_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon\"}}],\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"conditionalVisibility\":{\"parameterName\":\"showhidden\",\"comparison\":\"isNotEqualTo\"},\"name\":\"parameters - 20\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"582c425e-8c37-4e87-87f0-efc17aa7274a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Aggregates\",\"label\":\"Percentile\",\"type\":2,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"round(avg(Val), 2)\\\", \\\"label\\\":\\\"Average\\\", \\\"selected\\\":false },\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 1), 2)\\\", \\\"label\\\":\\\"P1st\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 5), 2)\\\", \\\"label\\\":\\\"P5th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 10), 2)\\\", \\\"label\\\":\\\"P10th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 50), 2)\\\", \\\"label\\\":\\\"P50th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 90), 2)\\\", \\\"label\\\":\\\"P90th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 95), 2)\\\", \\\"label\\\":\\\"P95th\\\", \\\"selected\\\":true},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 99), 2)\\\", \\\"label\\\":\\\"P99th\\\", \\\"selected\\\":false}  \\r\\n]\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"value\":\"round(percentile(Val, 99), 2)\"},{\"id\":\"2db5301e-bd7b-479d-a375-f247e2e5757d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"AggregatesRight\",\"type\":1,\"query\":\"print \\\"{Aggregates}\\\"\",\"crossComponentResources\":[\"{Workspace}\"],\"isHiddenWhenLocked\":true,\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"e837027b-efd3-4287-b524-3a8f819e6022\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Usagequerynew\",\"type\":1,\"value\":\"let workstart=8; let workend=17; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated > ago(30d) | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ('2de20a16-20c6-41af-82cd-bceb39195d1c') or '*' in ('2de20a16-20c6-41af-82cd-bceb39195d1c') | where tostring(split(_ResourceId,'/')[4])  in ('*') or '*' in ('*') | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (Cpu)=round(percentile(Val, 99), 2) by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend Val=(MemorySize-Val)/MemorySize*100 |summarize (Mem)=round(percentile(Val, 99), 2) by  Computer; let iops= InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (IOPs)=round(percentile(Val, 99), 2) by  Computer;let iolatency= InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransferLatencyMs\\\"|summarize (IOLatency)=round(percentile(Val, 99), 2) by  Computer; let nwsent=InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)=round(percentile(Val, 99), 2) by  Computer; let nwrec=InsightsMetrics | where TimeGenerated > ago(30d) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)=round(percentile(Val, 99), 2) by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union isfuzzy=true (Event | where TimeGenerated > ago(30d) | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=SecurityEvent | where EventID == 4624 | where LogonTypeName  ==\\\"10 - RemoteInteractive\\\"  | where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\" | summarize ['SSH/RDP']=count() by Computer |union  isfuzzy=true (Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer); let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer;let VMtrf=VMConnection | summarize ['Nw Sent Total']=format_bytes(sum(BytesSent)),  ['Nw Rec Total']=format_bytes(sum(BytesReceived)) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer | join kind= leftouter (    iolatency ) on Computer | join kind= leftouter (    vmcon ) on Computer| join kind= leftouter (    VMtrf) on Computer  |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  Cpu , Mem,IOPs,IOLatency,['Nw_Sent/sec']=format_bytes(nwsent), ['Nw_Rec/sec']=format_bytes(nwrec),InboundCon  ,['Nw Sent Total'],['Nw Rec Total']\\t\\t\\t          \",\"isHiddenWhenLocked\":true,\"criteriaData\":[{\"criteriaContext\":{\"leftOperand\":\"isSecurityEnabled\",\"operator\":\"isNotNull\",\"rightValType\":\"param\",\"resultValType\":\"static\",\"resultVal\":\"let workstart={PeakHourStart}; let workend={PeakHourEnd}; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated {TimeRange} | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ({subscription:subid}) or '*' in ({subscription:subid}) | where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg}) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (Cpu)={AggregatesRight} by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend Val=(MemorySize-Val)/MemorySize*100 |summarize (Mem)={AggregatesRight} by  Computer; let iops= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (IOPs)={AggregatesRight} by  Computer;let iolatency= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransferLatencyMs\\\"|summarize (IOLatency)={AggregatesRight} by  Computer; let nwsent=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)={AggregatesRight} by  Computer; let nwrec=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)={AggregatesRight} by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union isfuzzy=true (Event | where TimeGenerated {TimeRange} | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=SecurityEvent | where EventID == 4624 | where LogonTypeName  ==\\\"10 - RemoteInteractive\\\"  | where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\" | summarize ['SSH/RDP']=count() by Computer |union  isfuzzy=true (Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer); let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer;let VMtrf=VMConnection | summarize ['Nw Sent Total']=format_bytes(sum(BytesSent)),  ['Nw Rec Total']=format_bytes(sum(BytesReceived)) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer | join kind= leftouter (    iolatency ) on Computer | join kind= leftouter (    vmcon ) on Computer| join kind= leftouter (    VMtrf) on Computer  |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  Cpu , Mem,IOPs,IOLatency,['Nw_Sent/sec']=format_bytes(nwsent), ['Nw_Rec/sec']=format_bytes(nwrec),InboundCon  ,['Nw Sent Total'],['Nw Rec Total']\\t\\t\\t          \"}},{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"param\",\"resultValType\":\"expression\",\"resultVal\":\"let workstart={PeakHourStart}; let workend={PeakHourEnd}; let timezoneoffset=4; let cpu=InsightsMetrics | where TimeGenerated {TimeRange} | extend subid=tostring(split(_ResourceId, '/')[2]) | where subid in ({subscription:subid}) or '*' in ({subscription:subid}) | where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg}) | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where hour between (workstart..workend) | where Namespace == \\\"Processor\\\"  | where Name == \\\"UtilizationPercentage\\\" | summarize (Cpu)={AggregatesRight} by Computer, ResourceId=_ResourceId; let mem= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Memory\\\"  | where Name == \\\"AvailableMB\\\" | extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0) | extend Val=(MemorySize-Val)/MemorySize*100 |summarize (Mem)={AggregatesRight} by  Computer; let iops= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransfersPerSecond\\\" |summarize (IOPs)={AggregatesRight} by  Computer; let iolatency= InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"LogicalDisk\\\"  | where Name == \\\"TransferLatencyMs\\\"|summarize (IOLatency)={AggregatesRight} by  Computer;let nwsent=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"WriteBytesPerSecond\\\"  |summarize (nwsent)={AggregatesRight} by  Computer; let nwrec=InsightsMetrics | where TimeGenerated {TimeRange} | extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset | where Namespace == \\\"Network\\\" | where Name == \\\"ReadBytesPerSecond\\\"  |summarize (nwrec)={AggregatesRight} by  Computer; let boot=Syslog | where Facility ==\\\"daemon\\\" | where SyslogMessage startswith \\\"Startup finished\\\"  | where ProcessID == 1  |summarize bootcount=count() by Computer |union isfuzzy=true (Event | where TimeGenerated {TimeRange} | where EventLog == \\\"System\\\"  | where EventID == 1074  |summarize bootcount=count() by Computer); let logons=Syslog | where Facility == \\\"auth\\\" | where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\" | summarize ['SSH/RDP']=count() by Computer; let vmcon=VMConnection | where Direction == \\\"inbound\\\"  | where SourceIp <> \\\"127.0.0.1\\\"  | summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer;let VMtrf=VMConnection | summarize ['Nw Sent Total']=format_bytes(sum(BytesSent)),  ['Nw Rec Total']=format_bytes(sum(BytesReceived)) by Computer; cpu | join kind= leftouter (    mem ) on Computer | join kind= leftouter (    nwsent ) on Computer | join kind= leftouter (    nwrec ) on Computer | join kind= leftouter (    boot ) on Computer | join kind= leftouter (    logons ) on Computer | join kind= leftouter (    iops ) on Computer| join kind= leftouter (    iolatency ) on Computer  | join kind= leftouter (    vmcon ) on Computer | join kind= leftouter (    VMtrf) on Computer |project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  Cpu ,Mem,IOPs,IOLatency,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon,['Nw Sent Total'],['Nw Rec Total']\"}}],\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 20 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"{Usagequerynew}\",\"size\":0,\"title\":\"VM Usage Indicators\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"Computer\",\"parameterName\":\"Computer\",\"parameterType\":1},{\"fieldName\":\"ResourceId\",\"parameterName\":\"ResourceId\",\"parameterType\":1}],\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Computer\",\"formatter\":5},{\"columnMatch\":\"SSH/RDP\",\"formatter\":0,\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"bootcount\",\"formatter\":0,\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"Cpu\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"}},{\"columnMatch\":\"Mem\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"}},{\"columnMatch\":\"IOPs\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blue\"}},{\"columnMatch\":\"IOLatency\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"}},{\"columnMatch\":\"Nw_Sent\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"}},{\"columnMatch\":\"Nw_Rec\",\"formatter\":4,\"formatOptions\":{\"palette\":\"magenta\"}},{\"columnMatch\":\"InboundCon\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"cpu_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_avg\",\"formatter\":0,\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"iops_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1}}}],\"rowLimit\":1000,\"filter\":true,\"labelSettings\":[{\"columnId\":\"ResourceId\"},{\"columnId\":\"Computer\"},{\"columnId\":\"SSH/RDP\"},{\"columnId\":\"bootcount\"},{\"columnId\":\"Cpu\"},{\"columnId\":\"Mem\"},{\"columnId\":\"IOPs\"},{\"columnId\":\"IOLatency\",\"label\":\"IOLatency ms\"},{\"columnId\":\"Nw_Sent/sec\"},{\"columnId\":\"Nw_Rec/sec\"},{\"columnId\":\"InboundCon\"},{\"columnId\":\"Nw Sent Total\"},{\"columnId\":\"Nw Rec Total\"}]},\"sortBy\":[]},\"name\":\"query - 0 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Resources\\r\\n|where type == \\\"microsoft.compute/virtualmachines\\\"\\r\\n| where id=~\\\"{ResourceId}\\\"\\r\\n| project name,disktype=\\\"OsDisk\\\",diskname=properties.storageProfile.osDisk.name, Size=properties.storageProfile.osDisk.diskSizeGB ,DiskType=iff(isempty(tostring(properties.storageProfile.osDisk.vhd.uri)),\\\"ManagedDisk\\\",\\\"VHD\\\"),  [\\\"vhd/diskid\\\"]= iff(isempty(tostring(properties.storageProfile.osDisk.vhd.uri)),tolower(tostring(properties.storageProfile.osDisk.managedDisk.id)),tostring(properties.storageProfile.osDisk.vhd.uri))\\r\\n|union (\\r\\nResources\\r\\n|where type == \\\"microsoft.compute/virtualmachines\\\"\\r\\n| where id=~\\\"{ResourceId}\\\"\\r\\n| mvexpand disk=properties.storageProfile.dataDisks\\r\\n| project name , disktype=\\\"DataDisk\\\",diskname=disk.name,Size=disk.diskSizeGB ,DiskType=iff(isempty(tostring(properties.storageProfile.osDisk.vhd.uri)),\\\"ManagedDisk\\\",\\\"VHD\\\"),  [\\\"vhd/diskid\\\"]= iff(isempty(tostring(properties.storageProfile.osDisk.vhd.uri)),tolower(tostring(properties.storageProfile.osDisk.managedDisk.id)),tostring(properties.storageProfile.osDisk.vhd.uri)))\\r\\n| join kind= leftouter(\\r\\nResources\\r\\n|where type == \\\"microsoft.compute/disks\\\"\\r\\n| project id=tolower(id) , location, DiskType=tostring(sku.tier) ,  sku=tostring(sku.name) , diskSizeGB=toint(properties.diskSizeGB), MBps=properties.diskMBpsReadWrite, IOPSLimit=properties.diskIOPSReadWrite, resourceGroup,OwnerVM=managedBy,subscriptionId\\r\\n| where OwnerVM =~ \\\"{ResourceId}\\\"\\r\\n)  on $left.[\\\"vhd/diskid\\\"]==$right.id\\r\\n| project-away id , OwnerVM, subscriptionId\",\"size\":4,\"title\":\"VM Storage Profile\",\"exportedParameters\":[{\"fieldName\":\"Computer\",\"parameterName\":\"Computer\",\"parameterType\":1},{\"fieldName\":\"ResourceId\",\"parameterName\":\"ResourceId\",\"parameterType\":1}],\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{subscription}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Computer\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"SSH/RDP\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"bootcount\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"cpu_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_avg\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"InboundCon\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"iops_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1}}}],\"rowLimit\":1000,\"filter\":true},\"sortBy\":[]},\"conditionalVisibility\":{\"parameterName\":\"Computer\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 0 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"VMComputer\\r\\n| where TimeGenerated > ago (365d)\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where isnotempty(AzureSize)\\r\\n| summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId, AzureSize\\r\\n| project ResourceId , TimeGenerated, Computer , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB\",\"size\":4,\"title\":\"Azure Size History for VM \",\"exportedParameters\":[{\"fieldName\":\"Computer\",\"parameterName\":\"Computer\",\"parameterType\":1},{\"fieldName\":\"ResourceId\",\"parameterName\":\"ResourceId\",\"parameterType\":1}],\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Computer\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"SSH/RDP\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"bootcount\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"cpu_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_avg\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"InboundCon\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"iops_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1}}}],\"rowLimit\":1000,\"filter\":true},\"sortBy\":[]},\"conditionalVisibility\":{\"parameterName\":\"Computer\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 0 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart=8;\\r\\nlet workend=17;\\r\\nlet timezoneoffset=4;\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n|summarize (mem_p95)=percentiles(Val,95) by  Computer;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (iops_p95)=percentiles(Val,95) by  Computer;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)=percentiles(Val,95) by  Computer;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)=percentiles(Val,95) by  Computer;\\r\\nlet boot=Syslog\\r\\n| where Facility ==\\\"daemon\\\"\\r\\n| where SyslogMessage startswith \\\"Startup finished\\\" \\r\\n| where ProcessID == 1 \\r\\n|summarize bootcount=count() by Computer\\r\\n|union isfuzzy=true (Event\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where EventLog == \\\"System\\\" \\r\\n| where EventID == 1074 \\r\\n|summarize bootcount=count() by Computer);\\r\\nlet logons=SecurityEvent\\r\\n| where EventID == 4624\\r\\n| where LogonTypeName  ==\\\"10 - RemoteInteractive\\\" \\r\\n| where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer\\r\\n|union isfuzzy=true  (Syslog\\r\\n| where Facility == \\\"auth\\\"\\r\\n| where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer);\\r\\nlet vmcon=VMConnection\\r\\n| where Direction == \\\"inbound\\\" \\r\\n| where SourceIp <> \\\"127.0.0.1\\\" \\r\\n| summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer;\\r\\ncpu\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   nwsent\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   nwrec\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   boot\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   logons\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   vmcon\\r\\n) on Computer\\r\\n|project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon,iops_p95\\r\\n\\r\\n\\t\\t\\t\\r\\n\\r\\n        \",\"size\":0,\"title\":\"VM Usage Indicators\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"Computer\",\"parameterName\":\"Computer\",\"parameterType\":1},{\"fieldName\":\"ResourceId\",\"parameterName\":\"ResourceId\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Computer\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"SSH/RDP\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"bootcount\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"cpu_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_avg\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"InboundCon\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"iops_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1}}}],\"rowLimit\":1000,\"filter\":true,\"sortBy\":[{\"itemKey\":\"$gen_number_InboundCon_9\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"$gen_number_InboundCon_9\",\"sortOrder\":1}]},\"conditionalVisibility\":{\"parameterName\":\"showhidden\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 0 - Copy\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"nav\",\"links\":[{\"cellValue\":\"showhistory\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Show Perf History\",\"subTarget\":\"1\",\"preText\":\"\",\"style\":\"primary\"}]},\"customWidth\":\"20\",\"conditionalVisibility\":{\"parameterName\":\"Computer\",\"comparison\":\"isNotEqualTo\"},\"name\":\"links - 5\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"nav\",\"links\":[{\"cellValue\":\"showhistory\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Hide Perf History\",\"subTarget\":\"0\",\"style\":\"primary\"}]},\"customWidth\":\"20\",\"conditionalVisibility\":{\"parameterName\":\"Computer\",\"comparison\":\"isNotEqualTo\"},\"name\":\"links - 5 - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"582c425e-8c37-4e87-87f0-efc17aa7274a\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"Aggregates\",\"label\":\"Percentile\",\"type\":2,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"round(avg(Val), 2)\\\", \\\"label\\\":\\\"Average\\\", \\\"selected\\\":false },\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 1), 2)\\\", \\\"label\\\":\\\"P1st\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 5), 2)\\\", \\\"label\\\":\\\"P5th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 10), 2)\\\", \\\"label\\\":\\\"P10th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 50), 2)\\\", \\\"label\\\":\\\"P50th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 90), 2)\\\", \\\"label\\\":\\\"P90th\\\", \\\"selected\\\":false},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 95), 2)\\\", \\\"label\\\":\\\"P95th\\\", \\\"selected\\\":true},\\r\\n    { \\\"value\\\":\\\"round(percentile(Val, 99), 2)\\\", \\\"label\\\":\\\"P99th\\\", \\\"selected\\\":false}  \\r\\n]\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"value\":\"round(percentile(Val, 99), 2)\"},{\"id\":\"2db5301e-bd7b-479d-a375-f247e2e5757d\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"AggregatesRight\",\"type\":1,\"query\":\"print \\\"{Aggregates}\\\"\",\"crossComponentResources\":[\"{Workspace}\"],\"isHiddenWhenLocked\":true,\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},{\"id\":\"457dd68b-0820-48f9-b940-c86141a13fcc\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"TimeRangePerf\",\"label\":\"TimeRange\",\"type\":4,\"isRequired\":true,\"value\":{\"durationMs\":2592000000},\"typeSettings\":{\"selectableValues\":[{\"durationMs\":1800000},{\"durationMs\":3600000},{\"durationMs\":14400000},{\"durationMs\":43200000},{\"durationMs\":86400000},{\"durationMs\":172800000},{\"durationMs\":259200000},{\"durationMs\":604800000},{\"durationMs\":1209600000},{\"durationMs\":2419200000},{\"durationMs\":2592000000},{\"durationMs\":5184000000},{\"durationMs\":7776000000}]}}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 20 - Copy - Copy\"},{\"type\":1,\"content\":{\"json\":\"**Selected Performance Aggregation : {Aggregates:label}   for Computer  : {Computer}**\",\"style\":\"info\"},\"name\":\"text - 21\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRangePerf:end}-{TimeRangePerf:start}>60d, 4h,{TimeRangePerf:end}-{TimeRangePerf:start}>7d, 1h,{TimeRangePerf:end}-{TimeRangePerf:start}>1d,1h,10m);\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRangePerf}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (Cpu)={AggregatesRight}  by Computer, ResourceId=_ResourceId, bin (TimeGenerated , bucketsize);\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"%CPU History\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRangePerf:end}-{TimeRangePerf:start}>60d, 4h,{TimeRangePerf:end}-{TimeRangePerf:start}>7d, 1h,{TimeRangePerf:end}-{TimeRangePerf:start}>1d,1h,10m);\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRangePerf}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n| extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0)\\r\\n| extend Val=(MemorySize-Val)/MemorySize*100\\r\\n|summarize (Mem)={AggregatesRight} by  Computer, bin (TimeGenerated , bucketsize);\\r\\n\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"Memory Utilization %\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"AzDemoSrv1.SCLAB.local\",\"color\":\"orange\"},{\"color\":\"orange\"}]}},\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRangePerf:end}-{TimeRangePerf:start}>60d, 4h,{TimeRangePerf:end}-{TimeRangePerf:start}>7d, 1h,{TimeRangePerf:end}-{TimeRangePerf:start}>1d,1h,10m);\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRangePerf}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n| extend Disk = tostring(parse_json(Tags).[\\\"vm.azm.ms/mountId\\\"])\\r\\n|summarize (IOPs)={AggregatesRight}  by  strcat(Computer,\\\"::\\\",Disk),bin (TimeGenerated , bucketsize);\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"IOPS History\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"AzDemoSrv1.SCLAB.local\",\"color\":\"green\"}]}},\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5 - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRangePerf:end}-{TimeRangePerf:start}>60d, 4h,{TimeRangePerf:end}-{TimeRangePerf:start}>7d, 1h,{TimeRangePerf:end}-{TimeRangePerf:start}>1d,1h,10m);\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRangePerf}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransferLatencyMs\\\"\\r\\n| extend Disk = tostring(parse_json(Tags).[\\\"vm.azm.ms/mountId\\\"])\\r\\n|summarize (IOPs)={AggregatesRight}  by  strcat(Computer,\\\"::\\\",Disk), bin (TimeGenerated , bucketsize);\\r\\n\",\"size\":1,\"aggregation\":3,\"showAnalytics\":true,\"title\":\"IOPs Latency ms \",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"AzDemoSrv1.SCLAB.local\",\"color\":\"green\"}]}},\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRangePerf:end}-{TimeRangePerf:start}>60d, 4h,{TimeRangePerf:end}-{TimeRangePerf:start}>7d, 1h,{TimeRangePerf:end}-{TimeRangePerf:start}>1d,1h,10m);\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRangePerf}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwsent)={AggregatesRight}  by  Computer,Name, bin (TimeGenerated , bucketsize);\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"NW  Receive Bytes/sec History\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"vmw-sc-weu-mon1.SCLAB.local\",\"color\":\"lightBlue\"}],\"xSettings\":{},\"ySettings\":{}}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5 - Copy - Copy - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRangePerf:end}-{TimeRangePerf:start}>60d, 4h,{TimeRangePerf:end}-{TimeRangePerf:start}>7d, 1h,{TimeRangePerf:end}-{TimeRangePerf:start}>1d,1h,10m);\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRangePerf}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)={AggregatesRight}  by  Computer,Name, bin (TimeGenerated , bucketsize);\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"NW Sent  Bytes/sec History\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}],\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"vmw-sc-weu-mon1.SCLAB.local\",\"color\":\"orange\"}],\"xSettings\":{},\"ySettings\":{}}},\"customWidth\":\"50\",\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5 - Copy - Copy - Copy - Copy\"},{\"type\":1,\"content\":{\"json\":\"## VM Size Recommendations\\r\\n\\r\\nRules\\r\\n\\r\\n* No Single Core VM\\r\\n* No Basic SKU VM\\r\\n\\r\\nUpdate CPU and Memory Thresholds to find which VMs can be resized.\"},\"name\":\"text - 11\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"13a05aa7-9e83-4e83-aa9b-566f1f0bfc18\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"CPUThreshold\",\"type\":1,\"value\":\"45\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"label\":\"CPU Threshold\"},{\"id\":\"39aeb823-a86c-47b1-9f26-a0e3372c3631\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"MEMThreshold\",\"type\":1,\"value\":\"50\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"label\":\"MEM Threshold\"},{\"id\":\"c923ca77-5306-425d-8718-288033fc6e14\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"usesamefamily\",\"label\":\"Size Recommendation Scope\",\"type\":2,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"yes\\\", \\\"label\\\": \\\"Same Family Only\\\", \\\"selected\\\":false },\\r\\n    { \\\"value\\\":\\\"no\\\", \\\"label\\\": \\\"All VM Sizes\\\", \\\"selected\\\":true}\\r\\n]\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\"},{\"id\":\"78da93cb-59be-4500-b2ab-cd35b7c3b4f4\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"VMSizeList\",\"type\":1,\"value\":\"let  vmsize= datatable(Name:string,vcores:int,Ram:int,Disks:int) [\\\"Standard_B1ls\\\",1,512,2, \\\"Standard_B1ms\\\",1,2048,2 ,\\\"Standard_B1s\\\", 1,1024,2 ,\\\"Standard_B2ms\\\",2,8192,4 ,\\\"Standard_B2s\\\", 2,4096,4 ,\\\"Standard_B4ms\\\",4, 16384,8 ,\\\"Standard_B8ms\\\",8, 32768,16 ,\\\"Standard_B12ms\\\",12, 49152,16 ,\\\"Standard_B16ms\\\",16, 65536,32 ,\\\"Standard_B20ms\\\",20, 81920,32 ,\\\"Standard_D1_v2\\\",1,3584,4 ,\\\"Standard_D2_v2\\\",2,7168,8 ,\\\"Standard_D3_v2\\\",4, 14336,16 ,\\\"Standard_D4_v2\\\",8, 28672,32 ,\\\"Standard_D5_v2\\\",16, 57344,64 ,\\\"Standard_D11_v2\\\",2, 14336,8 ,\\\"Standard_D12_v2\\\",4, 28672,16 ,\\\"Standard_D13_v2\\\",8, 57344,32 ,\\\"Standard_D14_v2\\\",16,114688,64 ,\\\"Standard_D2_v2_Promo\\\",2,7168,8 ,\\\"Standard_D3_v2_Promo\\\",4, 14336,16 ,\\\"Standard_D4_v2_Promo\\\",8, 28672,32 ,\\\"Standard_D5_v2_Promo\\\", 16, 57344,64 ,\\\"Standard_D11_v2_Promo\\\", 2, 14336,8 ,\\\"Standard_D12_v2_Promo\\\", 4, 28672,16 ,\\\"Standard_D13_v2_Promo\\\", 8, 57344,32 ,\\\"Standard_D14_v2_Promo\\\",16,114688,64 ,\\\"Standard_F1\\\",1,2048,4 ,\\\"Standard_F2\\\",2,4096,8 ,\\\"Standard_F4\\\",4,8192,16 ,\\\"Standard_F8\\\",8, 16384,32 ,\\\"Standard_F16\\\",16, 32768,64 ,\\\"Standard_DS1_v2\\\",1,3584,4 ,\\\"Standard_DS2_v2\\\",2,7168,8 ,\\\"Standard_DS3_v2\\\",4, 14336,16 ,\\\"Standard_DS4_v2\\\",8, 28672,32 ,\\\"Standard_DS5_v2\\\",16, 57344,64 ,\\\"Standard_DS11-1_v2\\\", 2, 14336,8 ,\\\"Standard_DS11_v2\\\",2, 14336,8 ,\\\"Standard_DS12-1_v2\\\", 4, 28672,16 ,\\\"Standard_DS12-2_v2\\\", 4, 28672,16 ,\\\"Standard_DS12_v2\\\",4, 28672,16 ,\\\"Standard_DS13-2_v2\\\", 8, 57344,32 ,\\\"Standard_DS13-4_v2\\\", 8, 57344,32 ,\\\"Standard_DS13_v2\\\",8, 57344,32 ,\\\"Standard_DS14-4_v2\\\",16,114688,64 ,\\\"Standard_DS14-8_v2\\\",16,114688,64 ,\\\"Standard_DS14_v2\\\",16,114688,64 ,\\\"Standard_DS2_v2_Promo\\\", 2,7168,8 ,\\\"Standard_DS3_v2_Promo\\\", 4, 14336,16 ,\\\"Standard_DS4_v2_Promo\\\", 8, 28672,32 ,\\\"Standard_DS5_v2_Promo\\\",16, 57344,64 ,\\\"Standard_DS11_v2_Promo\\\",2, 14336,8 ,\\\"Standard_DS12_v2_Promo\\\",4, 28672,16 ,\\\"Standard_DS13_v2_Promo\\\",8, 57344,32 ,\\\"Standard_DS14_v2_Promo\\\",16,114688,64 ,\\\"Standard_F1s\\\", 1,2048,4 ,\\\"Standard_F2s\\\", 2,4096,8 ,\\\"Standard_F4s\\\", 4,8192,16 ,\\\"Standard_F8s\\\", 8, 16384,32 ,\\\"Standard_F16c\\\",16, 32768,64 ,\\\"Standard_A1_v2\\\",1,2048,2 ,\\\"Standard_A2m_v2\\\",2, 16384,4 ,\\\"Standard_A2_v2\\\",2,4096,4 ,\\\"Standard_A4m_v2\\\",4, 32768,8 ,\\\"Standard_A4_v2\\\",4,8192,8 ,\\\"Standard_A8m_v2\\\",8, 65536,16 ,\\\"Standard_A8_v2\\\",8, 16384,16 ,\\\"Standard_D2_v3\\\",2,8192,4 ,\\\"Standard_D4_v3\\\",4, 16384,8 ,\\\"Standard_D8_v3\\\",8, 32768,16 ,\\\"Standard_D16_v3\\\",16, 65536,32 ,\\\"Standard_D32_v3\\\",32,131072,32 ,\\\"Standard_D48_v3\\\",48,196608,32 ,\\\"Standard_D64_v3\\\",64,262144,32 ,\\\"Standard_D2s_v3\\\",2,8192,4 ,\\\"Standard_D4s_v3\\\",4, 16384,8 ,\\\"Standard_D8s_v3\\\",8, 32768,16 ,\\\"Standard_D16s_v3\\\",16, 65536,32 ,\\\"Standard_D32s_v3\\\",32,131072,32 ,\\\"Standard_D48s_v3\\\",48,196608,32 ,\\\"Standard_D64s_v3\\\",64,262144,32 ,\\\"Standard_E2_v3\\\",2, 16384,4 ,\\\"Standard_E4_v3\\\",4, 32768,8 ,\\\"Standard_E8_v3\\\",8, 65536,16 ,\\\"Standard_E16_v3\\\",16,131072,32 ,\\\"Standard_E20_v3\\\",20,163840,32 ,\\\"Standard_E32_v3\\\",32,262144,32 ,\\\"Standard_E2s_v3\\\",2, 16384,4 ,\\\"Standard_E4-2s_v3\\\",4, 32768,8 ,\\\"Standard_E4s_v3\\\",4, 32768,8 ,\\\"Standard_E8-2s_v3\\\",8, 65536,16 ,\\\"Standard_E8-4s_v3\\\",8, 65536,16 ,\\\"Standard_E8s_v3\\\",8, 65536,16 ,\\\"Standard_E16-4s_v3\\\",16,131072,32 ,\\\"Standard_E16-8s_v3\\\",16,131072,32 ,\\\"Standard_E16s_v3\\\",16,131072,32 ,\\\"Standard_E20s_v3\\\",20,163840,32 ,\\\"Standard_E32-8s_v3\\\",32,262144,32 ,\\\"Standard_E32-16s_v3\\\",32,262144,32 ,\\\"Standard_E32s_v3\\\",32,262144,32 ,\\\"Standard_A0\\\",1,768,1 ,\\\"Standard_A1\\\",1,1792,2 ,\\\"Standard_A2\\\",2,3584,4 ,\\\"Standard_A3\\\",4,7168,8 ,\\\"Standard_A5\\\",2, 14336,4 ,\\\"Standard_A4\\\",8, 14336,16 ,\\\"Standard_A6\\\",4, 28672,8 ,\\\"Standard_A7\\\",8, 57344,16 ,\\\"Basic_A0\\\",1,768,1 ,\\\"Basic_A1\\\",1,1792,2 ,\\\"Basic_A2\\\",2,3584,4 ,\\\"Basic_A3\\\",4,7168,8 ,\\\"Basic_A4\\\",8, 14336,16 ,\\\"Standard_D15_v2\\\",20,143360,64 ,\\\"Standard_E48_v3\\\",48,393216,32 ,\\\"Standard_E64i_v3\\\",64,442368,32 ,\\\"Standard_E64_v3\\\",64,442368,32 ,\\\"Standard_E48s_v3\\\",48,393216,32 ,\\\"Standard_E64-16s_v3\\\",64,442368,32 ,\\\"Standard_E64-32s_v3\\\",64,442368,32 ,\\\"Standard_E64is_v3\\\", 64,442368,32 ,\\\"Standard_E64s_v3\\\",64,442368,32 ,\\\"Standard_DS15_v2\\\",20,143360,64 ,\\\"Standard_D1\\\",1,3584,4 ,\\\"Standard_D2\\\",2,7168,8 ,\\\"Standard_D3\\\",4, 14336,16 ,\\\"Standard_D4\\\",8, 28672,32 ,\\\"Standard_D11\\\", 2, 14336,8 ,\\\"Standard_D12\\\", 4, 28672,16 ,\\\"Standard_D13\\\", 8, 57344,32 ,\\\"Standard_D14\\\",16,114688,64 ,\\\"Standard_L8s_v2\\\",8, 65536,16 ,\\\"Standard_L16s_v2\\\",16,131072,32 ,\\\"Standard_L32s_v2\\\",32,262144,32 ,\\\"Standard_L48s_v2\\\",48,393216,32 ,\\\"Standard_L64s_v2\\\",64,524288,32 ,\\\"Standard_L80s_v2\\\",80,655360,32 ,\\\"Standard_NC6s_v3\\\",6,114688,12 ,\\\"Standard_NC12s_v3\\\", 12,229376,24 ,\\\"Standard_NC24rs_v3\\\",24,458752,32 ,\\\"Standard_NC24s_v3\\\", 24,458752,32 ,\\\"Standard_G1\\\",2, 28672,8 ,\\\"Standard_G2\\\",4, 57344,16 ,\\\"Standard_G3\\\",8,114688,32 ,\\\"Standard_G4\\\", 16,229376,64 ,\\\"Standard_G5\\\", 32,458752,64 ,\\\"Standard_GS1\\\", 2, 28672,8 ,\\\"Standard_GS2\\\", 4, 57344,16 ,\\\"Standard_GS3\\\", 8,114688,32 ,\\\"Standard_GS4\\\",16,229376,64 ,\\\"Standard_GS4-4\\\",16,229376,64 ,\\\"Standard_GS4-8\\\",16,229376,64 ,\\\"Standard_GS5\\\",32,458752,64 ,\\\"Standard_GS5-8\\\",32,458752,64 ,\\\"Standard_GS5-16\\\",32,458752,64 ,\\\"Standard_L4s\\\", 4, 32768,16 ,\\\"Standard_L8s\\\", 8, 65536,32 ,\\\"Standard_L16c\\\",16,131072,64 ,\\\"Standard_L32c\\\",32,262144,64 ,\\\"Standard_M208ms_v2\\\",208 ,   5836800,64 ,\\\"Standard_M208s_v2\\\",208  ,  2918400,64 ,\\\"Standard_M416s_v2\\\",416  ,  5836800,64 ,\\\"Standard_M416ms_v2\\\",416 ,  11673600,64 ,\\\"Standard_D2a_v4\\\",2,8192,4 ,\\\"Standard_D4a_v4\\\",4, 16384,8 ,\\\"Standard_D8a_v4\\\",8, 32768,16 ,\\\"Standard_D16a_v4\\\",16, 65536,32 ,\\\"Standard_D32a_v4\\\",32,131072,32 ,\\\"Standard_D48a_v4\\\",48,196608,32 ,\\\"Standard_D64a_v4\\\",64,262144,32 ,\\\"Standard_D96a_v4\\\",96,393216,32 ,\\\"Standard_D2as_v4\\\",2,8192,4 ,\\\"Standard_D4as_v4\\\",4, 16384,8 ,\\\"Standard_D8as_v4\\\",8, 32768,16 ,\\\"Standard_D16as_v4\\\", 16, 65536,32 ,\\\"Standard_D32as_v4\\\", 32,131072,32 ,\\\"Standard_D48as_v4\\\", 48,196608,32 ,\\\"Standard_D64as_v4\\\", 64,262144,32 ,\\\"Standard_D96as_v4\\\", 96,393216,32 ,\\\"Standard_E2a_v4\\\",2, 16384,4 ,\\\"Standard_E4a_v4\\\",4, 32768,8 ,\\\"Standard_E8a_v4\\\",8, 65536,16 ,\\\"Standard_E16a_v4\\\",16,131072,32 ,\\\"Standard_E20a_v4\\\",20,163840,32 ,\\\"Standard_E32a_v4\\\",32,262144,32 ,\\\"Standard_E48a_v4\\\",48,393216,32 ,\\\"Standard_E64a_v4\\\",64,442368,32 ,\\\"Standard_E96a_v4\\\",96,688128,32 ,\\\"Standard_E2as_v4\\\",2, 16384,4 ,\\\"Standard_E4as_v4\\\",4, 32768,8 ,\\\"Standard_E8as_v4\\\",8, 65536,16 ,\\\"Standard_E16as_v4\\\", 16,131072,32 ,\\\"Standard_E20as_v4\\\", 20,163840,32 ,\\\"Standard_E32as_v4\\\", 32,262144,32 ,\\\"Standard_E48as_v4\\\", 48,393216,32 ,\\\"Standard_E64as_v4\\\", 64,442368,32 ,\\\"Standard_E96as_v4\\\", 96,688128,32 ,\\\"Standard_NV6\\\", 6, 57344,24 ,\\\"Standard_NV12\\\",12,114688,48 ,\\\"Standard_NV24\\\",24,229376,64 ,\\\"Standard_NV6_Promo\\\", 6, 57344,24 ,\\\"Standard_NV12_Promo\\\",12,114688,48 ,\\\"Standard_NV24_Promo\\\",24,229376,64 ,\\\"Standard_DS1\\\", 1,3584,4 ,\\\"Standard_DS2\\\", 2,7168,8 ,\\\"Standard_DS3\\\", 4, 14336,16 ,\\\"Standard_DS4\\\", 8, 28672,32 ,\\\"Standard_DS11\\\",2, 14336,8 ,\\\"Standard_DS12\\\",4, 28672,16 ,\\\"Standard_DS13\\\",8, 57344,32 ,\\\"Standard_DS14\\\",16,114688,64 ,\\\"Standard_NC6\\\", 6, 57344,24 ,\\\"Standard_NC12\\\",12,114688,48 ,\\\"Standard_NC24\\\",24,229376,64 ,\\\"Standard_NC24r\\\",24,229376,64 ,\\\"Standard_NC6_Promo\\\", 6, 57344,24 ,\\\"Standard_NC12_Promo\\\",12,114688,48 ,\\\"Standard_NC24_Promo\\\",24,229376,64 ,\\\"Standard_NC24r_Promo\\\", 24,229376,64 ,\\\"Standard_F2s_v2\\\",2,4096,4 ,\\\"Standard_F4s_v2\\\",4,8192,8 ,\\\"Standard_F8s_v2\\\",8, 16384,16 ,\\\"Standard_F16s_v2\\\",16, 32768,32 ,\\\"Standard_F32s_v2\\\",32, 65536,32 ,\\\"Standard_F48s_v2\\\",48, 98304,32 ,\\\"Standard_F64s_v2\\\",64,131072,32 ,\\\"Standard_F72s_v2\\\",72,147456,32 ,\\\"Standard_M8-2ms\\\",8,224000,8 ,\\\"Standard_M8-4ms\\\",8,224000,8 ,\\\"Standard_M8ms\\\",8,224000,8 ,\\\"Standard_M16-4mc\\\",16,448000,16 ,\\\"Standard_M16-8mc\\\",16,448000,16 ,\\\"Standard_M16ms\\\",16,448000,16 ,\\\"Standard_M32-8mc\\\",32,896000,32 ,\\\"Standard_M32-16mc\\\", 32,896000,32 ,\\\"Standard_M32ls\\\",32,262144,32 ,\\\"Standard_M32ms\\\",32,896000,32 ,\\\"Standard_M32ts\\\",32,196608,32 ,\\\"Standard_M64-16mc\\\", 64   , 1792000,64 ,\\\"Standard_M64-32mc\\\", 64  ,  1792000,64 ,\\\"Standard_M64ls\\\",64,524288,64 ,\\\"Standard_M64ms\\\",64 ,   1792000,64 ,\\\"Standard_M64s\\\",64,    1024000,64 ,\\\"Standard_M128-32ms\\\",128  ,  3891200,64 ,\\\"Standard_M128-64ms\\\",128,    3891200,64 ,\\\"Standard_M128ms\\\",128 ,   3891200,64 ,\\\"Standard_M128c\\\",128 ,   2048000,64 ,\\\"Standard_M64\\\",64 ,   1024000,64 ,\\\"Standard_M64m\\\",64,    1792000,64 ,\\\"Standard_M128\\\",128  ,  2048000,64 ,\\\"Standard_M128m\\\",128 ,   3891200,64 ,\\\"Standard_PB6s\\\",6,114688,12 ,\\\"Standard_HB60rs\\\",60,228881,4 ,\\\"Standard_HB120rs_v2\\\", 120,480000,8 ,\\\"Standard_H8\\\",8, 57344,32 ,\\\"Standard_H8_Promo\\\",8, 57344,32 ,\\\"Standard_H16\\\",16,114688,64 ,\\\"Standard_H16_Promo\\\",16,114688,64 ,\\\"Standard_H8m\\\", 8,114688,32 ,\\\"Standard_H8m_Promo\\\", 8,114688,32 ,\\\"Standard_H16m\\\",16,229376,64 ,\\\"Standard_H16m_Promo\\\",16,229376,64 ,\\\"Standard_H16r\\\",16,114688,64 ,\\\"Standard_H16r_Promo\\\",16,114688,64 ,\\\"Standard_H16mr\\\",16,229376,64 ,\\\"Standard_H16mr_Promo\\\", 16,229376,64 ,\\\"Standard_ND6s\\\",6,114688,12 ,\\\"Standard_ND12s\\\",12,229376,24 ,\\\"Standard_ND24rc\\\",24,458752,32 ,\\\"Standard_ND24s\\\",24,458752,32 ,\\\"Standard_NC6s_v2\\\",6,114688,12 ,\\\"Standard_NC12s_v2\\\", 12,229376,24 ,\\\"Standard_NC24rs_v2\\\",24,458752,32 ,\\\"Standard_NC24s_v2\\\", 24,458752,32 ,\\\"Standard_ND40rs_v2\\\",40,688128,8 ,\\\"Standard_HC44rc\\\",44,335693,4 ,\\\"Standard_NV4as_v4\\\",4, 14336,8 ,\\\"Standard_NV8as_v4\\\",8, 28672,16 ,\\\"Standard_NV16as_v4\\\",16, 57344,32 ,\\\"Standard_NV32as_v4\\\",32,114688,32 ,\\\"Standard_DC2s\\\",2,8192,2 ,\\\"Standard_DC4s\\\",4, 16384,4 ,\\\"Standard_NP10s\\\",10,172032,8 ,\\\"Standard_NP20s\\\",20,344064,16 ,\\\"Standard_NP40s\\\",40,688128,32 ,\\\"Standard_NV6s_v2\\\",6,114688,12 ,\\\"Standard_NV12s_v2\\\", 12,229376,24 ,\\\"Standard_NV24s_v2\\\", 24,458752,32 ,\\\"Standard_NV12s_v3\\\", 12,114688,12 ,\\\"Standard_NV24s_v3\\\", 24,229376,24 ,\\\"Standard_NV48s_v3\\\", 48,458752,32 ,\\\"Standard_A8\\\",8, 57344,32 ,\\\"Standard_A9\\\", 16,114688,64 ,\\\"Standard_A10\\\", 8, 57344,32 ,\\\"Standard_A11\\\",16,114688,64];\",\"isHiddenWhenLocked\":true,\"criteriaData\":[{\"criteriaContext\":{\"operator\":\"Default\",\"rightValType\":\"param\",\"resultValType\":\"static\",\"resultVal\":\"let  vmsize= datatable(Name:string,vcores:int,Ram:int,Disks:int) [\\\"Standard_B1ls\\\",1,512,2, \\\"Standard_B1ms\\\",1,2048,2 ,\\\"Standard_B1s\\\", 1,1024,2 ,\\\"Standard_B2ms\\\",2,8192,4 ,\\\"Standard_B2s\\\", 2,4096,4 ,\\\"Standard_B4ms\\\",4, 16384,8 ,\\\"Standard_B8ms\\\",8, 32768,16 ,\\\"Standard_B12ms\\\",12, 49152,16 ,\\\"Standard_B16ms\\\",16, 65536,32 ,\\\"Standard_B20ms\\\",20, 81920,32 ,\\\"Standard_D1_v2\\\",1,3584,4 ,\\\"Standard_D2_v2\\\",2,7168,8 ,\\\"Standard_D3_v2\\\",4, 14336,16 ,\\\"Standard_D4_v2\\\",8, 28672,32 ,\\\"Standard_D5_v2\\\",16, 57344,64 ,\\\"Standard_D11_v2\\\",2, 14336,8 ,\\\"Standard_D12_v2\\\",4, 28672,16 ,\\\"Standard_D13_v2\\\",8, 57344,32 ,\\\"Standard_D14_v2\\\",16,114688,64 ,\\\"Standard_D2_v2_Promo\\\",2,7168,8 ,\\\"Standard_D3_v2_Promo\\\",4, 14336,16 ,\\\"Standard_D4_v2_Promo\\\",8, 28672,32 ,\\\"Standard_D5_v2_Promo\\\", 16, 57344,64 ,\\\"Standard_D11_v2_Promo\\\", 2, 14336,8 ,\\\"Standard_D12_v2_Promo\\\", 4, 28672,16 ,\\\"Standard_D13_v2_Promo\\\", 8, 57344,32 ,\\\"Standard_D14_v2_Promo\\\",16,114688,64 ,\\\"Standard_F1\\\",1,2048,4 ,\\\"Standard_F2\\\",2,4096,8 ,\\\"Standard_F4\\\",4,8192,16 ,\\\"Standard_F8\\\",8, 16384,32 ,\\\"Standard_F16\\\",16, 32768,64 ,\\\"Standard_DS1_v2\\\",1,3584,4 ,\\\"Standard_DS2_v2\\\",2,7168,8 ,\\\"Standard_DS3_v2\\\",4, 14336,16 ,\\\"Standard_DS4_v2\\\",8, 28672,32 ,\\\"Standard_DS5_v2\\\",16, 57344,64 ,\\\"Standard_DS11-1_v2\\\", 2, 14336,8 ,\\\"Standard_DS11_v2\\\",2, 14336,8 ,\\\"Standard_DS12-1_v2\\\", 4, 28672,16 ,\\\"Standard_DS12-2_v2\\\", 4, 28672,16 ,\\\"Standard_DS12_v2\\\",4, 28672,16 ,\\\"Standard_DS13-2_v2\\\", 8, 57344,32 ,\\\"Standard_DS13-4_v2\\\", 8, 57344,32 ,\\\"Standard_DS13_v2\\\",8, 57344,32 ,\\\"Standard_DS14-4_v2\\\",16,114688,64 ,\\\"Standard_DS14-8_v2\\\",16,114688,64 ,\\\"Standard_DS14_v2\\\",16,114688,64 ,\\\"Standard_DS2_v2_Promo\\\", 2,7168,8 ,\\\"Standard_DS3_v2_Promo\\\", 4, 14336,16 ,\\\"Standard_DS4_v2_Promo\\\", 8, 28672,32 ,\\\"Standard_DS5_v2_Promo\\\",16, 57344,64 ,\\\"Standard_DS11_v2_Promo\\\",2, 14336,8 ,\\\"Standard_DS12_v2_Promo\\\",4, 28672,16 ,\\\"Standard_DS13_v2_Promo\\\",8, 57344,32 ,\\\"Standard_DS14_v2_Promo\\\",16,114688,64 ,\\\"Standard_F1s\\\", 1,2048,4 ,\\\"Standard_F2s\\\", 2,4096,8 ,\\\"Standard_F4s\\\", 4,8192,16 ,\\\"Standard_F8s\\\", 8, 16384,32 ,\\\"Standard_F16c\\\",16, 32768,64 ,\\\"Standard_A1_v2\\\",1,2048,2 ,\\\"Standard_A2m_v2\\\",2, 16384,4 ,\\\"Standard_A2_v2\\\",2,4096,4 ,\\\"Standard_A4m_v2\\\",4, 32768,8 ,\\\"Standard_A4_v2\\\",4,8192,8 ,\\\"Standard_A8m_v2\\\",8, 65536,16 ,\\\"Standard_A8_v2\\\",8, 16384,16 ,\\\"Standard_D2_v3\\\",2,8192,4 ,\\\"Standard_D4_v3\\\",4, 16384,8 ,\\\"Standard_D8_v3\\\",8, 32768,16 ,\\\"Standard_D16_v3\\\",16, 65536,32 ,\\\"Standard_D32_v3\\\",32,131072,32 ,\\\"Standard_D48_v3\\\",48,196608,32 ,\\\"Standard_D64_v3\\\",64,262144,32 ,\\\"Standard_D2s_v3\\\",2,8192,4 ,\\\"Standard_D4s_v3\\\",4, 16384,8 ,\\\"Standard_D8s_v3\\\",8, 32768,16 ,\\\"Standard_D16s_v3\\\",16, 65536,32 ,\\\"Standard_D32s_v3\\\",32,131072,32 ,\\\"Standard_D48s_v3\\\",48,196608,32 ,\\\"Standard_D64s_v3\\\",64,262144,32 ,\\\"Standard_E2_v3\\\",2, 16384,4 ,\\\"Standard_E4_v3\\\",4, 32768,8 ,\\\"Standard_E8_v3\\\",8, 65536,16 ,\\\"Standard_E16_v3\\\",16,131072,32 ,\\\"Standard_E20_v3\\\",20,163840,32 ,\\\"Standard_E32_v3\\\",32,262144,32 ,\\\"Standard_E2s_v3\\\",2, 16384,4 ,\\\"Standard_E4-2s_v3\\\",4, 32768,8 ,\\\"Standard_E4s_v3\\\",4, 32768,8 ,\\\"Standard_E8-2s_v3\\\",8, 65536,16 ,\\\"Standard_E8-4s_v3\\\",8, 65536,16 ,\\\"Standard_E8s_v3\\\",8, 65536,16 ,\\\"Standard_E16-4s_v3\\\",16,131072,32 ,\\\"Standard_E16-8s_v3\\\",16,131072,32 ,\\\"Standard_E16s_v3\\\",16,131072,32 ,\\\"Standard_E20s_v3\\\",20,163840,32 ,\\\"Standard_E32-8s_v3\\\",32,262144,32 ,\\\"Standard_E32-16s_v3\\\",32,262144,32 ,\\\"Standard_E32s_v3\\\",32,262144,32 ,\\\"Standard_A0\\\",1,768,1 ,\\\"Standard_A1\\\",1,1792,2 ,\\\"Standard_A2\\\",2,3584,4 ,\\\"Standard_A3\\\",4,7168,8 ,\\\"Standard_A5\\\",2, 14336,4 ,\\\"Standard_A4\\\",8, 14336,16 ,\\\"Standard_A6\\\",4, 28672,8 ,\\\"Standard_A7\\\",8, 57344,16 ,\\\"Basic_A0\\\",1,768,1 ,\\\"Basic_A1\\\",1,1792,2 ,\\\"Basic_A2\\\",2,3584,4 ,\\\"Basic_A3\\\",4,7168,8 ,\\\"Basic_A4\\\",8, 14336,16 ,\\\"Standard_D15_v2\\\",20,143360,64 ,\\\"Standard_E48_v3\\\",48,393216,32 ,\\\"Standard_E64i_v3\\\",64,442368,32 ,\\\"Standard_E64_v3\\\",64,442368,32 ,\\\"Standard_E48s_v3\\\",48,393216,32 ,\\\"Standard_E64-16s_v3\\\",64,442368,32 ,\\\"Standard_E64-32s_v3\\\",64,442368,32 ,\\\"Standard_E64is_v3\\\", 64,442368,32 ,\\\"Standard_E64s_v3\\\",64,442368,32 ,\\\"Standard_DS15_v2\\\",20,143360,64 ,\\\"Standard_D1\\\",1,3584,4 ,\\\"Standard_D2\\\",2,7168,8 ,\\\"Standard_D3\\\",4, 14336,16 ,\\\"Standard_D4\\\",8, 28672,32 ,\\\"Standard_D11\\\", 2, 14336,8 ,\\\"Standard_D12\\\", 4, 28672,16 ,\\\"Standard_D13\\\", 8, 57344,32 ,\\\"Standard_D14\\\",16,114688,64 ,\\\"Standard_L8s_v2\\\",8, 65536,16 ,\\\"Standard_L16s_v2\\\",16,131072,32 ,\\\"Standard_L32s_v2\\\",32,262144,32 ,\\\"Standard_L48s_v2\\\",48,393216,32 ,\\\"Standard_L64s_v2\\\",64,524288,32 ,\\\"Standard_L80s_v2\\\",80,655360,32 ,\\\"Standard_NC6s_v3\\\",6,114688,12 ,\\\"Standard_NC12s_v3\\\", 12,229376,24 ,\\\"Standard_NC24rs_v3\\\",24,458752,32 ,\\\"Standard_NC24s_v3\\\", 24,458752,32 ,\\\"Standard_G1\\\",2, 28672,8 ,\\\"Standard_G2\\\",4, 57344,16 ,\\\"Standard_G3\\\",8,114688,32 ,\\\"Standard_G4\\\", 16,229376,64 ,\\\"Standard_G5\\\", 32,458752,64 ,\\\"Standard_GS1\\\", 2, 28672,8 ,\\\"Standard_GS2\\\", 4, 57344,16 ,\\\"Standard_GS3\\\", 8,114688,32 ,\\\"Standard_GS4\\\",16,229376,64 ,\\\"Standard_GS4-4\\\",16,229376,64 ,\\\"Standard_GS4-8\\\",16,229376,64 ,\\\"Standard_GS5\\\",32,458752,64 ,\\\"Standard_GS5-8\\\",32,458752,64 ,\\\"Standard_GS5-16\\\",32,458752,64 ,\\\"Standard_L4s\\\", 4, 32768,16 ,\\\"Standard_L8s\\\", 8, 65536,32 ,\\\"Standard_L16c\\\",16,131072,64 ,\\\"Standard_L32c\\\",32,262144,64 ,\\\"Standard_M208ms_v2\\\",208 ,   5836800,64 ,\\\"Standard_M208s_v2\\\",208  ,  2918400,64 ,\\\"Standard_M416s_v2\\\",416  ,  5836800,64 ,\\\"Standard_M416ms_v2\\\",416 ,  11673600,64 ,\\\"Standard_D2a_v4\\\",2,8192,4 ,\\\"Standard_D4a_v4\\\",4, 16384,8 ,\\\"Standard_D8a_v4\\\",8, 32768,16 ,\\\"Standard_D16a_v4\\\",16, 65536,32 ,\\\"Standard_D32a_v4\\\",32,131072,32 ,\\\"Standard_D48a_v4\\\",48,196608,32 ,\\\"Standard_D64a_v4\\\",64,262144,32 ,\\\"Standard_D96a_v4\\\",96,393216,32 ,\\\"Standard_D2as_v4\\\",2,8192,4 ,\\\"Standard_D4as_v4\\\",4, 16384,8 ,\\\"Standard_D8as_v4\\\",8, 32768,16 ,\\\"Standard_D16as_v4\\\", 16, 65536,32 ,\\\"Standard_D32as_v4\\\", 32,131072,32 ,\\\"Standard_D48as_v4\\\", 48,196608,32 ,\\\"Standard_D64as_v4\\\", 64,262144,32 ,\\\"Standard_D96as_v4\\\", 96,393216,32 ,\\\"Standard_E2a_v4\\\",2, 16384,4 ,\\\"Standard_E4a_v4\\\",4, 32768,8 ,\\\"Standard_E8a_v4\\\",8, 65536,16 ,\\\"Standard_E16a_v4\\\",16,131072,32 ,\\\"Standard_E20a_v4\\\",20,163840,32 ,\\\"Standard_E32a_v4\\\",32,262144,32 ,\\\"Standard_E48a_v4\\\",48,393216,32 ,\\\"Standard_E64a_v4\\\",64,442368,32 ,\\\"Standard_E96a_v4\\\",96,688128,32 ,\\\"Standard_E2as_v4\\\",2, 16384,4 ,\\\"Standard_E4as_v4\\\",4, 32768,8 ,\\\"Standard_E8as_v4\\\",8, 65536,16 ,\\\"Standard_E16as_v4\\\", 16,131072,32 ,\\\"Standard_E20as_v4\\\", 20,163840,32 ,\\\"Standard_E32as_v4\\\", 32,262144,32 ,\\\"Standard_E48as_v4\\\", 48,393216,32 ,\\\"Standard_E64as_v4\\\", 64,442368,32 ,\\\"Standard_E96as_v4\\\", 96,688128,32 ,\\\"Standard_NV6\\\", 6, 57344,24 ,\\\"Standard_NV12\\\",12,114688,48 ,\\\"Standard_NV24\\\",24,229376,64 ,\\\"Standard_NV6_Promo\\\", 6, 57344,24 ,\\\"Standard_NV12_Promo\\\",12,114688,48 ,\\\"Standard_NV24_Promo\\\",24,229376,64 ,\\\"Standard_DS1\\\", 1,3584,4 ,\\\"Standard_DS2\\\", 2,7168,8 ,\\\"Standard_DS3\\\", 4, 14336,16 ,\\\"Standard_DS4\\\", 8, 28672,32 ,\\\"Standard_DS11\\\",2, 14336,8 ,\\\"Standard_DS12\\\",4, 28672,16 ,\\\"Standard_DS13\\\",8, 57344,32 ,\\\"Standard_DS14\\\",16,114688,64 ,\\\"Standard_NC6\\\", 6, 57344,24 ,\\\"Standard_NC12\\\",12,114688,48 ,\\\"Standard_NC24\\\",24,229376,64 ,\\\"Standard_NC24r\\\",24,229376,64 ,\\\"Standard_NC6_Promo\\\", 6, 57344,24 ,\\\"Standard_NC12_Promo\\\",12,114688,48 ,\\\"Standard_NC24_Promo\\\",24,229376,64 ,\\\"Standard_NC24r_Promo\\\", 24,229376,64 ,\\\"Standard_F2s_v2\\\",2,4096,4 ,\\\"Standard_F4s_v2\\\",4,8192,8 ,\\\"Standard_F8s_v2\\\",8, 16384,16 ,\\\"Standard_F16s_v2\\\",16, 32768,32 ,\\\"Standard_F32s_v2\\\",32, 65536,32 ,\\\"Standard_F48s_v2\\\",48, 98304,32 ,\\\"Standard_F64s_v2\\\",64,131072,32 ,\\\"Standard_F72s_v2\\\",72,147456,32 ,\\\"Standard_M8-2ms\\\",8,224000,8 ,\\\"Standard_M8-4ms\\\",8,224000,8 ,\\\"Standard_M8ms\\\",8,224000,8 ,\\\"Standard_M16-4mc\\\",16,448000,16 ,\\\"Standard_M16-8mc\\\",16,448000,16 ,\\\"Standard_M16ms\\\",16,448000,16 ,\\\"Standard_M32-8mc\\\",32,896000,32 ,\\\"Standard_M32-16mc\\\", 32,896000,32 ,\\\"Standard_M32ls\\\",32,262144,32 ,\\\"Standard_M32ms\\\",32,896000,32 ,\\\"Standard_M32ts\\\",32,196608,32 ,\\\"Standard_M64-16mc\\\", 64   , 1792000,64 ,\\\"Standard_M64-32mc\\\", 64  ,  1792000,64 ,\\\"Standard_M64ls\\\",64,524288,64 ,\\\"Standard_M64ms\\\",64 ,   1792000,64 ,\\\"Standard_M64s\\\",64,    1024000,64 ,\\\"Standard_M128-32ms\\\",128  ,  3891200,64 ,\\\"Standard_M128-64ms\\\",128,    3891200,64 ,\\\"Standard_M128ms\\\",128 ,   3891200,64 ,\\\"Standard_M128c\\\",128 ,   2048000,64 ,\\\"Standard_M64\\\",64 ,   1024000,64 ,\\\"Standard_M64m\\\",64,    1792000,64 ,\\\"Standard_M128\\\",128  ,  2048000,64 ,\\\"Standard_M128m\\\",128 ,   3891200,64 ,\\\"Standard_PB6s\\\",6,114688,12 ,\\\"Standard_HB60rs\\\",60,228881,4 ,\\\"Standard_HB120rs_v2\\\", 120,480000,8 ,\\\"Standard_H8\\\",8, 57344,32 ,\\\"Standard_H8_Promo\\\",8, 57344,32 ,\\\"Standard_H16\\\",16,114688,64 ,\\\"Standard_H16_Promo\\\",16,114688,64 ,\\\"Standard_H8m\\\", 8,114688,32 ,\\\"Standard_H8m_Promo\\\", 8,114688,32 ,\\\"Standard_H16m\\\",16,229376,64 ,\\\"Standard_H16m_Promo\\\",16,229376,64 ,\\\"Standard_H16r\\\",16,114688,64 ,\\\"Standard_H16r_Promo\\\",16,114688,64 ,\\\"Standard_H16mr\\\",16,229376,64 ,\\\"Standard_H16mr_Promo\\\", 16,229376,64 ,\\\"Standard_ND6s\\\",6,114688,12 ,\\\"Standard_ND12s\\\",12,229376,24 ,\\\"Standard_ND24rc\\\",24,458752,32 ,\\\"Standard_ND24s\\\",24,458752,32 ,\\\"Standard_NC6s_v2\\\",6,114688,12 ,\\\"Standard_NC12s_v2\\\", 12,229376,24 ,\\\"Standard_NC24rs_v2\\\",24,458752,32 ,\\\"Standard_NC24s_v2\\\", 24,458752,32 ,\\\"Standard_ND40rs_v2\\\",40,688128,8 ,\\\"Standard_HC44rc\\\",44,335693,4 ,\\\"Standard_NV4as_v4\\\",4, 14336,8 ,\\\"Standard_NV8as_v4\\\",8, 28672,16 ,\\\"Standard_NV16as_v4\\\",16, 57344,32 ,\\\"Standard_NV32as_v4\\\",32,114688,32 ,\\\"Standard_DC2s\\\",2,8192,2 ,\\\"Standard_DC4s\\\",4, 16384,4 ,\\\"Standard_NP10s\\\",10,172032,8 ,\\\"Standard_NP20s\\\",20,344064,16 ,\\\"Standard_NP40s\\\",40,688128,32 ,\\\"Standard_NV6s_v2\\\",6,114688,12 ,\\\"Standard_NV12s_v2\\\", 12,229376,24 ,\\\"Standard_NV24s_v2\\\", 24,458752,32 ,\\\"Standard_NV12s_v3\\\", 12,114688,12 ,\\\"Standard_NV24s_v3\\\", 24,229376,24 ,\\\"Standard_NV48s_v3\\\", 48,458752,32 ,\\\"Standard_A8\\\",8, 57344,32 ,\\\"Standard_A9\\\", 16,114688,64 ,\\\"Standard_A10\\\", 8, 57344,32 ,\\\"Standard_A11\\\",16,114688,64];\"}}],\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart={PeakHourStart};\\r\\nlet workend={PeakHourEnd};\\r\\nlet timezoneoffset=4;\\r\\n{VMSizeList}\\r\\nlet inv=VMComputer\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where AzureSubscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId\\r\\n| project ResourceId , Computer , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB;\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n| extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0)\\r\\n| extend MemUtil=(MemorySize-Val)/MemorySize*100\\r\\n|summarize (mem_p95)=percentiles(MemUtil,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (iops_p95)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet boot=Syslog\\r\\n| where Facility ==\\\"daemon\\\"\\r\\n| where SyslogMessage startswith \\\"Startup finished\\\" \\r\\n| where ProcessID == 1 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId\\r\\n|union  isfuzzy=true (Event\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where EventLog == \\\"System\\\" \\r\\n| where EventID == 1074 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId);\\r\\nlet logons=SecurityEvent\\r\\n| where EventID == 4624\\r\\n| where LogonTypeName  ==\\\"10 - RemoteInteractive\\\" \\r\\n| where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId\\r\\n|union  isfuzzy=true (Syslog\\r\\n| where Facility == \\\"auth\\\"\\r\\n| where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId);\\r\\nlet vmcon=VMConnection\\r\\n| where Direction == \\\"inbound\\\" \\r\\n| where SourceIp <> \\\"127.0.0.1\\\" \\r\\n| summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer, ResourceId=_ResourceId;\\r\\ninv\\r\\n| join kind= leftouter (\\r\\n   cpu\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmcon\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n) on $left.AzureSize==$right.Name\\r\\n|project Computer, AzureSize, Cpus,CpuSpeed, cpu_p95, mem_p95 , iops_p95 ,RAM=PhysicalMemoryMB,Disks,maxIops=Disks*500 ,ResourceId\\r\\n| extend VmFamily=tostring(split(AzureSize,'_')[1])\\r\\n| extend Fm1=substring(VmFamily,0,1) \\r\\n| extend Fm2=substring(VmFamily,1,1)\\r\\n| extend Vmfamily=iff(Fm2 matches regex \\\"[0-9]\\\", Fm1, strcat(Fm1,Fm2))\\r\\n|extend ramneed= RAM*mem_p95/100+500\\r\\n| extend newram= case(\\r\\nramneed<0,RAM,\\r\\nramneed<1024,1024,\\r\\nramneed<2048,2048,\\r\\nramneed<3584,3584,\\r\\nramneed<4096,4096,\\r\\nramneed<7168,7168,\\r\\nramneed<8192,8192,\\r\\nramneed<14336,14336,\\r\\nramneed<16386,16384,\\r\\nramneed<28672,28672,\\r\\nramneed<32768,32768,0\\r\\n)\\r\\n| extend cpu_resize=iff(cpu_p95<toint(\\\"{CPUThreshold}\\\") and Cpus !=1 ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend mem_resize=iff(mem_p95<toint(\\\"{MEMThreshold}\\\") and newram < RAM,\\\"yes\\\", \\\"no\\\")\\r\\n| extend iops_resize=iff(iops_p95<(maxIops*0.4),\\\"yes\\\", \\\"no\\\")\\r\\n| extend newcpu= toint(iff (Cpus <= 2,2, Cpus/2))\\r\\n| extend  CanResize=iff(cpu_resize ==\\\"yes\\\" and mem_resize==\\\"yes\\\" and iops_resize == \\\"yes\\\" , \\\"Resizing Possible\\\",\\\"Resizing not Possible\\\")\\r\\n| summarize CountofVMs=count() by CanResize\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":1,\"title\":\"Resize Possible VMs\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"piechart\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"cpu_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"iops_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"mem_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"iops_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}}]},\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"yes\",\"color\":\"green\"},{\"seriesName\":\"no\",\"color\":\"orange\"},{\"seriesName\":\"Resizing Possible\",\"color\":\"green\"},{\"seriesName\":\"Resizing not Possible\",\"color\":\"orange\"}],\"ySettings\":{}}},\"customWidth\":\"50\",\"name\":\"query - 1\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart={PeakHourStart};\\r\\nlet workend={PeakHourEnd};\\r\\nlet timezoneoffset=4;\\r\\n{VMSizeList}\\r\\nlet inv=VMComputer\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where AzureSubscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId\\r\\n| project ResourceId , Computer , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB;\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n| extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0)\\r\\n| extend MemUtil=(MemorySize-Val)/MemorySize*100\\r\\n|summarize (mem_p95)=percentiles(MemUtil,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (iops_p95)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet boot=Syslog\\r\\n| where Facility ==\\\"daemon\\\"\\r\\n| where SyslogMessage startswith \\\"Startup finished\\\" \\r\\n| where ProcessID == 1 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId\\r\\n|union  isfuzzy=true (Event\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where EventLog == \\\"System\\\" \\r\\n| where EventID == 1074 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId);\\r\\nlet logons=SecurityEvent\\r\\n| where EventID == 4624\\r\\n| where LogonTypeName  ==\\\"10 - RemoteInteractive\\\" \\r\\n| where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId\\r\\n|union  isfuzzy=true (Syslog\\r\\n| where Facility == \\\"auth\\\"\\r\\n| where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId);\\r\\nlet vmcon=VMConnection\\r\\n| where Direction == \\\"inbound\\\" \\r\\n| where SourceIp <> \\\"127.0.0.1\\\" \\r\\n| summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer, ResourceId=_ResourceId;\\r\\ninv\\r\\n| join kind= leftouter (\\r\\n   cpu\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmcon\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n) on $left.AzureSize==$right.Name\\r\\n|project Computer, AzureSize, Cpus,CpuSpeed, cpu_p95, mem_p95 , iops_p95 ,RAM=PhysicalMemoryMB,Disks,maxIops=Disks*500 ,ResourceId\\r\\n| extend VmFamily=tostring(split(AzureSize,'_')[1])\\r\\n| extend Fm1=substring(VmFamily,0,1) \\r\\n| extend Fm2=substring(VmFamily,1,1)\\r\\n| extend Vmfamily=iff(Fm2 matches regex \\\"[0-9]\\\", Fm1, strcat(Fm1,Fm2))\\r\\n|extend ramneed= RAM*mem_p95/100+500\\r\\n| extend newram= case(\\r\\nramneed<0,RAM,\\r\\nramneed<1024,1024,\\r\\nramneed<2048,2048,\\r\\nramneed<3584,3584,\\r\\nramneed<4096,4096,\\r\\nramneed<7168,7168,\\r\\nramneed<8192,8192,\\r\\nramneed<14336,14336,\\r\\nramneed<16386,16384,\\r\\nramneed<28672,28672,\\r\\nramneed<32768,32768,0\\r\\n)\\r\\n| extend cpu_resize=iff(cpu_p95<toint(\\\"{CPUThreshold}\\\") and Cpus !=1 ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend mem_resize=iff(mem_p95<toint(\\\"{MEMThreshold}\\\") and newram < RAM,\\\"yes\\\", \\\"no\\\")\\r\\n| extend iops_resize=iff(iops_p95<(maxIops*0.4),\\\"yes\\\", \\\"no\\\")\\r\\n| extend newcpu= toint(iff (Cpus <= 2,2, Cpus/2))\\r\\n| extend  CanResize=iff(cpu_resize ==\\\"yes\\\" and mem_resize==\\\"yes\\\" and iops_resize == \\\"yes\\\" , \\\"yes\\\",\\\"no\\\")\\r\\n| where CanResize == \\\"yes\\\"\\r\\n| summarize count() by AzureSize\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":1,\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"tiles\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"cpu_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"iops_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"mem_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"iops_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}}]},\"tileSettings\":{\"showBorder\":false,\"titleContent\":{\"columnMatch\":\"AzureSize\",\"formatter\":1},\"leftContent\":{\"columnMatch\":\"count_\",\"formatter\":12,\"formatOptions\":{\"palette\":\"auto\"},\"numberFormat\":{\"unit\":17,\"options\":{\"maximumSignificantDigits\":3,\"maximumFractionDigits\":2}}}},\"chartSettings\":{\"createOtherGroup\":null,\"seriesLabelSettings\":[{\"seriesName\":\"yes\",\"color\":\"green\"},{\"seriesName\":\"no\",\"color\":\"orange\"}],\"ySettings\":{}}},\"customWidth\":\"50\",\"name\":\"query - 1 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart={PeakHourStart};\\r\\nlet workend={PeakHourEnd};\\r\\nlet timezoneoffset=4;\\r\\n{VMSizeList}\\r\\nlet inv=VMComputer\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where AzureSubscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId\\r\\n| project ResourceId , Computer , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB\\r\\n| where isnotempty(AzureSize);\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (Cpu)= {AggregatesRight} by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n| extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0)\\r\\n| extend Val=(MemorySize-Val)/MemorySize*100\\r\\n|summarize (Mem)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (IOPs)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\ninv\\r\\n| join kind= leftouter (\\r\\n   cpu\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n) on $left.AzureSize==$right.Name\\r\\n|project Computer, AzureSize, Cpus,CpuSpeed, Cpu, Mem, IOPs ,RAM=PhysicalMemoryMB,Disks,maxIops=Disks*500 ,ResourceId\\r\\n| extend VmFamily=tostring(split(AzureSize,'_')[1])\\r\\n| extend Fm1=substring(VmFamily,0,1) \\r\\n| extend Fm2=substring(VmFamily,1,1)\\r\\n| extend Vmfamily=iff(Fm2 matches regex \\\"[0-9]\\\", Fm1, strcat(Fm1,Fm2))\\r\\n|extend ramneed= RAM*Mem/100+500\\r\\n| extend newram= case(\\r\\nramneed<0,RAM,\\r\\nramneed<1024,1024,\\r\\nramneed<2048,2048,\\r\\nramneed<3584,3584,\\r\\nramneed<4096,4096,\\r\\nramneed<7168,7168,\\r\\nramneed<8192,8192,\\r\\nramneed<14336,14336,\\r\\nramneed<16386,16384,\\r\\nramneed<28672,28672,\\r\\nramneed<32768,32768,0\\r\\n)\\r\\n| extend cpu_resize=iff(Cpu<toint(\\\"{CPUThreshold}\\\") and Cpus !=1 ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend mem_resize=iff(Mem<toint(\\\"{MEMThreshold}\\\") and newram < RAM,\\\"yes\\\", \\\"no\\\")\\r\\n| extend iops_resize=iff(IOPs<(maxIops*0.4),\\\"yes\\\", \\\"no\\\")\\r\\n| extend newcpu= toint(iff (Cpus <= 2,2, Cpus/2))\\r\\n| extend  CanResize=iff(cpu_resize ==\\\"yes\\\" and mem_resize==\\\"yes\\\" and iops_resize == \\\"yes\\\" , \\\"yes\\\",\\\"no\\\")\\r\\n| project ResourceId, AzureSize, Cpus,RAM, Cpu, Mem, IOPs, cpu_resize, mem_resize, iops_resize,newcpu,newram\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":1,\"showAnalytics\":true,\"title\":\"VM Usage with Resize Options\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"cpu_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"iops_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"mem_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"iops_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}}],\"rowLimit\":1000,\"labelSettings\":[{\"columnId\":\"ResourceId\"},{\"columnId\":\"AzureSize\"},{\"columnId\":\"Cpus\"},{\"columnId\":\"cpu_resize\"},{\"columnId\":\"mem_resize\"},{\"columnId\":\"iops_resize\"},{\"columnId\":\"newcpu\",\"label\":\"Recomended CPU\"}]},\"sortBy\":[]},\"name\":\"query - 1 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart={PeakHourStart};\\r\\nlet workend={PeakHourEnd};\\r\\nlet timezoneoffset=4;\\r\\n{VMSizeList}\\r\\nlet inv=VMComputer\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where AzureSubscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId\\r\\n| project ResourceId , Computer , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB\\r\\n| where isnotempty(AzureSize);\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (Cpu)= {AggregatesRight} by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n| extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0)\\r\\n| extend Val=(MemorySize-Val)/MemorySize*100\\r\\n|summarize (Mem)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (IOPs)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)= {AggregatesRight} by  Computer, ResourceId=_ResourceId;\\r\\ninv\\r\\n| join kind= leftouter (\\r\\n   cpu\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n) on $left.AzureSize==$right.Name\\r\\n|project Computer, AzureSize, Cpus,CpuSpeed, Cpu, Mem, IOPs ,RAM=PhysicalMemoryMB,Disks,maxIops=Disks*500 ,ResourceId\\r\\n| extend VmFamily=tostring(split(AzureSize,'_')[1])\\r\\n| extend Fm1=substring(VmFamily,0,1) \\r\\n| extend Fm2=substring(VmFamily,1,1)\\r\\n| extend Vmfamily=iff(Fm2 matches regex \\\"[0-9]\\\", Fm1, strcat(Fm1,Fm2))\\r\\n|extend ramneed= RAM*Mem/100+500\\r\\n| extend newram= case(\\r\\nramneed<0,RAM,\\r\\nramneed<1024,1024,\\r\\nramneed<2048,2048,\\r\\nramneed<3584,3584,\\r\\nramneed<4096,4096,\\r\\nramneed<7168,7168,\\r\\nramneed<8192,8192,\\r\\nramneed<14336,14336,\\r\\nramneed<16386,16384,\\r\\nramneed<28672,28672,\\r\\nramneed<32768,32768,0\\r\\n)\\r\\n| extend cpu_resize=iff(Cpu<toint(\\\"{CPUThreshold}\\\") and Cpus !=1 ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend mem_resize=iff(Mem<toint(\\\"{MEMThreshold}\\\") and newram < RAM,\\\"yes\\\", \\\"no\\\")\\r\\n| extend iops_resize=iff(IOPs<(maxIops*0.4),\\\"yes\\\", \\\"no\\\")\\r\\n| extend newcpu= toint(iff (Cpus <= 2,2, Cpus/2))\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n   | project Name,vcores=toint(vcores),Ram,Disks\\r\\n) on $left.newcpu==$right.vcores\\r\\n//| where Name !startswith  'Basic' and AzureSize != Name and iff(Vmfamily !startswith \\\"B\\\", Name !contains'_B' , 1==1) \\r\\n| where cpu_resize ==\\\"yes\\\" and mem_resize==\\\"yes\\\" and iops_resize == \\\"yes\\\"\\r\\n| where  Ram <= RAM  and Ram >= ramneed\\r\\n| where Name !startswith  'Basic' and AzureSize != Name and  iff(\\\"{usesamefamily:value}\\\"==\\\"yes\\\",Name startswith strcat(\\\"Standard_\\\",Vmfamily),1==1)\\r\\n| sort by Ram asc\\r\\n| summarize possibleSize = makelist(pack('size', strcat(Name , '|',vcores,'|',Ram))) by  ResourceId,AzureSize,Vmfamily, Cpus,RAM,newcpu,newram,CpuSpeed, Cpu, Mem , IOPs ,Disks ,cpu_resize, mem_resize ,iops_resize\\r\\n\",\"size\":0,\"title\":\"Size Recomendations\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"showExportToExcel\":true,\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Vmfamily\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"CpuSpeed\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"cpu_p95\",\"formatter\":5,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":5,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"iops_p95\",\"formatter\":5,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"Disks\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"cpu_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"mem_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"iops_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"possibleSize\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}],\"rowLimit\":1000}},\"name\":\"query - 1 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart=8;\\r\\nlet workend=17;\\r\\nlet timezoneoffset=4;\\r\\n{VMSizeList}\\r\\nlet inv=VMComputer\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where AzureSubscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription}) or '*' in ({subscription})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId\\r\\n| project ResourceId , Computer , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB;\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n|summarize (mem_p95)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (iops_p95)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet boot=Syslog\\r\\n| where Facility ==\\\"daemon\\\"\\r\\n| where SyslogMessage startswith \\\"Startup finished\\\" \\r\\n| where ProcessID == 1 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId\\r\\n|union  isfuzzy=true (Event\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where EventLog == \\\"System\\\" \\r\\n| where EventID == 1074 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId);\\r\\nlet logons=SecurityEvent\\r\\n| where EventID == 4624\\r\\n| where LogonTypeName  ==\\\"10 - RemoteInteractive\\\" \\r\\n| where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId\\r\\n|union isfuzzy=true  (Syslog\\r\\n| where Facility == \\\"auth\\\"\\r\\n| where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId);\\r\\nlet vmcon=VMConnection\\r\\n| where Direction == \\\"inbound\\\" \\r\\n| where SourceIp <> \\\"127.0.0.1\\\" \\r\\n| summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer, ResourceId=_ResourceId;\\r\\ninv\\r\\n| join kind= leftouter (\\r\\n   cpu\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   nwsent\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   nwrec\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   boot\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   logons\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmcon\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n) on $left.AzureSize==$right.Name\\r\\n|project Computer, AzureSize, Cpus,CpuSpeed, cpu_p95, mem_p95 , iops_p95 ,RAM=PhysicalMemoryMB,Disks,maxIops=Disks*500 ,ResourceId\\r\\n| extend VmFamily=tostring(split(AzureSize,'_')[1])\\r\\n| extend Fm1=substring(VmFamily,0,1) \\r\\n| extend Fm2=substring(VmFamily,1,1)\\r\\n| extend Vmfamily=iff(Fm2 matches regex \\\"[0-9]\\\", Fm1, strcat(Fm1,Fm2))\\r\\n| extend cpu_resize=iff(cpu_p95<toint(\\\"{CPUThreshold}\\\") ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend mem_resize=iff((RAM-mem_p95)/RAM*100<40,\\\"yes\\\", \\\"no\\\")\\r\\n| extend iops_resize=iff(iops_p95<(maxIops*0.4),\\\"yes\\\", \\\"no\\\")\\r\\n| extend newcpu= toint(iff (Cpus <= 2,2, Cpus/2))\\r\\n|extend ramneed= RAM-mem_p95+500\\r\\n| extend newram= case(\\r\\nramneed<0,RAM,\\r\\nramneed<1024,1024,\\r\\nramneed<2048,2048,\\r\\nramneed<3584,3584,\\r\\nramneed<4096,4096,\\r\\nramneed<7168,7168,\\r\\nramneed<8192,8192,\\r\\nramneed<14336,14336,\\r\\nramneed<16386,16384,\\r\\nramneed<28672,28672,\\r\\nramneed<32768,32768,0\\r\\n)\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n   | project Name,vcores=toint(vcores),Ram,Disks\\r\\n) on $left.newcpu==$right.vcores\\r\\n| where Ram <= newram and Ram <= RAM  \\r\\n//| where Name !startswith  'Basic' and AzureSize != Name and iff(Vmfamily !startswith \\\"B\\\", Name !contains'_B' , 1==1) \\r\\n| where Name !startswith  'Basic' and AzureSize != Name and  iff(isnotempty(\\\"{usesamefamily}\\\"),Name startswith strcat(\\\"Standard_\\\",Vmfamily),1==1)\\r\\n| summarize possibleSize = makelist(pack('size', strcat(Name , '|',vcores,'|',Ram))) by  ResourceId,AzureSize,Vmfamily, Cpus,CpuSpeed, cpu_p95, mem_p95 , iops_p95 ,RAM,Disks ,cpu_resize, mem_resize ,iops_resize\\r\\n| join kind= leftouter (AzureUsage_CL\\r\\n| where ConsumedService_s == \\\"Microsoft.Compute\\\" \\r\\n| summarize Cost=round(sum(PretaxCost_d),4) by ResourceId=tolower(InstanceId_s),ConsumedService=ConsumedService_s , Subscription=SubscriptionGuid_g , SubscriptionName=SubscriptionName_s  \\r\\n) on ResourceId\\r\\n| join kind = leftouter(\\r\\n    AzureUsage_CL\\r\\n| where TimeGenerated >= ago(1d)\\r\\n| where ConsumedService_s == \\\"Microsoft.Compute\\\" \\r\\n//| where SubscriptionGuid_g in ({subscription}) or '*' in ({subscription})\\r\\n| extend ReservationId = tostring(parse_json(AdditionalInfo_s).ReservationId) \\r\\n| extend ReservationOrderId = tostring(parse_json(AdditionalInfo_s).ReservationOrderId)\\r\\n| extend UsageType = tostring(parse_json(AdditionalInfo_s).UsageType)  \\r\\n| extend VCPUs = tostring(parse_json(AdditionalInfo_s).VCPUs) \\r\\n| extend ServiceType= tostring(parse_json(AdditionalInfo_s).ServiceType) \\r\\n| extend ImageType = tostring(parse_json(AdditionalInfo_s).ImageType) \\r\\n| extend ConsumptionMeter = tostring(parse_json(AdditionalInfo_s).ConsumptionMeter) \\r\\n| where UsageType startswith \\\"ComputeHR\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by  InstanceId_s\\r\\n| where isnotempty(ReservationId)\\r\\n| project ResourceId=InstanceId_s , ReservationId, ServiceType\\r\\n) on ResourceId\\r\\n| project ResourceId ,AzureSize,Vmfamily, Cpus ,RAM,Disks ,cpu_resize, mem_resize ,iops_resize , Cost, SubscriptionName\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":1,\"title\":\"Size Recomendations with Cost Info\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"cpu_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"mem_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"iops_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Cost\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"currency\":\"USD\",\"style\":\"currency\",\"useGrouping\":false}}},{\"columnMatch\":\"cpu_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"iops_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"possibleSize\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"isusageexist\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"showhidden\",\"comparison\":\"isNotEqualTo\"}],\"showPin\":false,\"name\":\"query - 1 - Copy - Copy\"}]},\"conditionalVisibilities\":[{\"parameterName\":\"VMInsightsEnabled\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"rg\",\"comparison\":\"isNotEqualTo\"}],\"name\":\"PerfData\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Resources\\r\\n|where type == \\\"microsoft.compute/virtualmachines\\\"| project name , resourceGroup, License=properties.licenseType, Os=properties.storageProfile.osDisk.osType ,publisher=properties.storageProfile.imageReference.publisher,offer=properties.storageProfile.imageReference.offer, ossku=properties.storageProfile.imageReference.sku\\r\\n//| where Os == \\\"Windows\\\"\\r\\n| extend OSLicenceType=iff(Os == \\\"Windows\\\",iff(License==\\\"Windows_Server\\\",\\\"AHUB\\\",\\\"None\\\"),\\\"NotApplicable\\\")\\r\\n| where OSLicenceType != \\\"NotApplicable\\\"\\r\\n| summarize count() by  OSLicenceType \",\"size\":0,\"title\":\"Azure Hybrid Use Summary\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{subscription}\"],\"visualization\":\"piechart\",\"chartSettings\":{\"seriesLabelSettings\":[{\"seriesName\":\"None\",\"color\":\"orange\"},{\"seriesName\":\"AHUB\",\"color\":\"green\"}]}},\"name\":\"query - 13\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"Resources\\r\\n| where subscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n|where type == \\\"microsoft.compute/virtualmachines\\\"| project name , resourceGroup, License=properties.licenseType, Os=properties.storageProfile.osDisk.osType ,publisher=properties.storageProfile.imageReference.publisher,offer=properties.storageProfile.imageReference.offer, ossku=properties.storageProfile.imageReference.sku\\r\\n//| where Os == \\\"Windows\\\"\\r\\n| extend OSLicenceType=iff(Os == \\\"Windows\\\",iff(License==\\\"Windows_Server\\\",\\\"AHUB\\\",\\\"None\\\"),\\\"NotApplicable\\\")\",\"size\":0,\"title\":\"Azure Hybrid Use Benefit\",\"showExportToExcel\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{subscription}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"License\",\"formatter\":5}],\"rowLimit\":1000}},\"name\":\"query - 12\"},{\"type\":1,\"content\":{\"json\":\"## Unused Disks\\r\\n\\r\\nManaged disks can be Attached , Reserved (Attached to an deallocated VM) or Unattached\"},\"name\":\"text - 15\"},{\"type\":12,\"content\":{\"version\":\"NotebookGroup/1.0\",\"groupType\":\"editable\",\"title\":\"VM Usage Legacy\",\"items\":[{\"type\":1,\"content\":{\"json\":\"## VM Insights is not enabled ! Only usage counters will be displayed. We wont be alto to check and recommend size optimizations for Azure VMs. \"},\"name\":\"text - 18\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart={PeakHourStart};\\r\\nlet workend={PeakHourEnd};\\r\\nlet timezoneoffset=4;\\r\\nlet cpu=Perf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend subid=tostring(split(_ResourceId, '/')[2])\\r\\n| where subid in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where CounterName == \\\"% Processor Time\\\" \\r\\n| where InstanceName == \\\"_Total\\\" \\r\\n| where ObjectName == \\\"Processor\\\" \\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(CounterValue,50,95),cpu_avg=avg(CounterValue) by Computer, ResourceId=_ResourceId\\r\\n| where isnotempty(ResourceId);\\r\\nlet mem=\\r\\nPerf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where CounterName startswith \\\"Available MBytes\\\"  \\r\\n| where ObjectName == \\\"Memory\\\" \\r\\n//| extend MemorySize = round(todouble(parse_json(Tags).[\\\"vm.azm.ms/memorySizeMB\\\"]),0)\\r\\n//| extend MemUtil=(MemorySize-Val)/MemorySize*100\\r\\n|summarize (mem_p95)=percentiles(CounterValue,95) by  Computer;\\r\\nlet iops=\\r\\nPerf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where CounterName == \\\"Disk Transfers/sec\\\" \\r\\n| where InstanceName == \\\"_Total\\\" \\r\\n| where ObjectName contains \\\"disk\\\" \\r\\n|summarize (iops_p95)=percentiles(CounterValue,95) by  Computer;\\r\\nlet nwsent=Perf\\r\\n| where TimeGenerated {TimeRange} \\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where CounterName == \\\"Bytes Sent/sec\\\"\\r\\n| summarize (nwsent)=sum(CounterValue) by Computer\\r\\n|union  isfuzzy=true (Perf\\r\\n| where TimeGenerated {TimeRange} \\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where CounterName==\\\"Total Bytes Transmitted\\\"\\r\\n| summarize (nwsent)=max(CounterValue) by Computer);\\r\\nlet nwrec=Perf\\r\\n| where TimeGenerated {TimeRange} \\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where CounterName == \\\"Bytes Received/sec\\\"\\r\\n| summarize (nwrec)=sum(CounterValue) by Computer\\r\\n|union isfuzzy=true (Perf\\r\\n| where TimeGenerated {TimeRange} \\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where CounterName==\\\"Total Bytes Received\\\"\\r\\n| summarize (nwrec)=max(CounterValue) by Computer);\\r\\nlet boot=Syslog\\r\\n| where Facility ==\\\"daemon\\\"\\r\\n| where SyslogMessage startswith \\\"Startup finished\\\" \\r\\n| where ProcessID == 1 \\r\\n|summarize bootcount=count() by Computer\\r\\n|union  isfuzzy=true (Event\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where EventLog == \\\"System\\\" \\r\\n| where EventID == 1074 \\r\\n|summarize bootcount=count() by Computer);\\r\\nlet logons=SecurityEvent\\r\\n| where EventID == 4624\\r\\n| where LogonTypeName  ==\\\"10 - RemoteInteractive\\\" \\r\\n| where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer\\r\\n|union  isfuzzy=true (Syslog\\r\\n| where Facility == \\\"auth\\\"\\r\\n| where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer);\\r\\ncpu\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   nwsent\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   nwrec\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   boot\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   logons\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on Computer\\r\\n|project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,iops_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec)\\r\\n\\r\\n\\t\\t\\t\\r\\n\\r\\n        \",\"size\":0,\"title\":\"VM Usage Indicators\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"Computer\",\"parameterName\":\"Computer\",\"parameterType\":1},{\"fieldName\":\"ResourceId\",\"parameterName\":\"ResourceId\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Computer\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"SSH/RDP\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"bootcount\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"cpu_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_avg\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"InboundCon\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"iops_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1}}}],\"rowLimit\":1000,\"filter\":true,\"sortBy\":[{\"itemKey\":\"$gen_bar_cpu_p95_4\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"$gen_bar_cpu_p95_4\",\"sortOrder\":1}]},\"name\":\"query - 0\"},{\"type\":1,\"content\":{\"json\":\"Nw_Sent and Nw_Rec calculated from Bytes Sent/sec and Bytes Received/sec for Windows VMs and might not reflect the  total traffic during that period . These figures are added just to provide some nw traffic indicators .\"},\"name\":\"text - 20\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart={PeakHourStart};\\r\\nlet workend={PeakHourEnd};\\r\\nlet timezoneoffset=4;\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n|summarize (mem_p95)=percentiles(Val,95) by  Computer;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (iops_p95)=percentiles(Val,95) by  Computer;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)=percentiles(Val,95) by  Computer;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n//| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)=percentiles(Val,95) by  Computer;\\r\\nlet boot=Syslog\\r\\n| where Facility ==\\\"daemon\\\"\\r\\n| where SyslogMessage startswith \\\"Startup finished\\\" \\r\\n| where ProcessID == 1 \\r\\n|summarize bootcount=count() by Computer\\r\\n|union isfuzzy=true  (Event\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where EventLog == \\\"System\\\" \\r\\n| where EventID == 1074 \\r\\n|summarize bootcount=count() by Computer);\\r\\nlet logons=SecurityEvent\\r\\n| where EventID == 4624\\r\\n| where LogonTypeName  ==\\\"10 - RemoteInteractive\\\" \\r\\n| where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer\\r\\n|union  isfuzzy=true (Syslog\\r\\n| where Facility == \\\"auth\\\"\\r\\n| where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer);\\r\\nlet vmcon=VMConnection\\r\\n| where Direction == \\\"inbound\\\" \\r\\n| where SourceIp <> \\\"127.0.0.1\\\" \\r\\n| summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer;\\r\\ncpu\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   nwsent\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   nwrec\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   boot\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   logons\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on Computer\\r\\n| join kind= leftouter (\\r\\n   vmcon\\r\\n) on Computer\\r\\n|project ResourceId,Computer , ['SSH/RDP'] , bootcount ,  cpu_p95 , cpu_avg ,mem_p95,Nw_Sent=format_bytes(nwsent), Nw_Rec=format_bytes(nwrec),InboundCon,iops_p95\\r\\n\\r\\n\\t\\t\\t\\r\\n\\r\\n        \",\"size\":0,\"title\":\"VM Usage Indicators\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"exportedParameters\":[{\"fieldName\":\"Computer\",\"parameterName\":\"Computer\",\"parameterType\":1},{\"fieldName\":\"ResourceId\",\"parameterName\":\"ResourceId\",\"parameterType\":1}],\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"Computer\",\"formatter\":5,\"formatOptions\":{}},{\"columnMatch\":\"SSH/RDP\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"bootcount\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"cpu_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"coldHot\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_avg\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"blueDark\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"InboundCon\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\"},\"emptyValCustomText\":\"\\\"N/A\\\"\"}},{\"columnMatch\":\"iops_p95\",\"formatter\":4,\"formatOptions\":{\"palette\":\"orange\"},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":1}}}],\"rowLimit\":1000,\"filter\":true,\"sortBy\":[{\"itemKey\":\"$gen_number_InboundCon_9\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"$gen_number_InboundCon_9\",\"sortOrder\":1}]},\"conditionalVisibility\":{\"parameterName\":\"showhidden\",\"comparison\":\"isNotEqualTo\"},\"name\":\"query - 0 - Copy\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"nav\",\"links\":[{\"cellValue\":\"showhistory\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Show Perf History\",\"subTarget\":\"1\",\"preText\":\"\",\"style\":\"primary\"}]},\"customWidth\":\"20\",\"conditionalVisibility\":{\"parameterName\":\"Computer\",\"comparison\":\"isNotEqualTo\"},\"name\":\"links - 5\"},{\"type\":11,\"content\":{\"version\":\"LinkItem/1.0\",\"style\":\"nav\",\"links\":[{\"cellValue\":\"showhistory\",\"linkTarget\":\"parameter\",\"linkLabel\":\"Hide Perf History\",\"subTarget\":\"0\",\"style\":\"primary\"}]},\"customWidth\":\"20\",\"conditionalVisibility\":{\"parameterName\":\"Computer\",\"comparison\":\"isNotEqualTo\"},\"name\":\"links - 5 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRange:end}-{TimeRange:start}>60d, 4h,{TimeRange:end}-{TimeRange:start}>7d, 1h,{TimeRange:end}-{TimeRange:start}>1d,1h,10m);\\r\\nPerf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where CounterName == \\\"% Processor Time\\\" \\r\\n| where InstanceName == \\\"_Total\\\" \\r\\n| where ObjectName == \\\"Processor\\\" \\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(CounterValue,50,95),cpu_avg=avg(CounterValue) by Computer, ResourceId=_ResourceId, bin (TimeGenerated , bucketsize);\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"%CPU History\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRange:end}-{TimeRange:start}>60d, 4h,{TimeRange:end}-{TimeRange:start}>7d, 1h,{TimeRange:end}-{TimeRange:start}>1d,1h,10m);\\r\\nPerf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where CounterName startswith \\\"Available MBytes\\\"  \\r\\n| where ObjectName == \\\"Memory\\\" \\r\\n|summarize (mem_p95)=percentiles(CounterValue,95) by  Computer, bin (TimeGenerated , bucketsize);\\r\\n\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"Memory Utilization %\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let bucketsize=case({TimeRange:end}-{TimeRange:start}>60d, 4h,{TimeRange:end}-{TimeRange:start}>7d, 1h,{TimeRange:end}-{TimeRange:start}>1d,1h,10m);\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| where Computer == \\\"{Computer}\\\"\\r\\n| where CounterName == \\\"Disk Transfers/sec\\\" \\r\\n| where InstanceName == \\\"_Total\\\" \\r\\n| where ObjectName contains \\\"disk\\\" \\r\\n|summarize (iops_p95)=percentiles(CounterValue,95) by  Computer, bin (TimeGenerated , bucketsize);\\r\\n\",\"size\":1,\"aggregation\":3,\"title\":\"IOPS History\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"visualization\":\"linechart\",\"gridSettings\":{\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"sortBy\":[{\"itemKey\":\"TimeGenerated\",\"sortOrder\":1}]},\"conditionalVisibility\":{\"parameterName\":\"showhistory\",\"comparison\":\"isEqualTo\",\"value\":\"1\"},\"name\":\"query - 5 - Copy - Copy\"},{\"type\":9,\"content\":{\"version\":\"KqlParameterItem/1.0\",\"parameters\":[{\"id\":\"13a05aa7-9e83-4e83-aa9b-566f1f0bfc18\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"CPUThreshold\",\"type\":1,\"value\":\"40\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"label\":\"CPU Threshold\"},{\"id\":\"39aeb823-a86c-47b1-9f26-a0e3372c3631\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"MEMThreshold\",\"type\":1,\"value\":\"50\",\"timeContext\":{\"durationMs\":0},\"timeContextFromParameter\":\"TimeRange\",\"label\":\"MEM Threshold\"},{\"id\":\"c923ca77-5306-425d-8718-288033fc6e14\",\"version\":\"KqlParameterItem/1.0\",\"name\":\"usesamefamily\",\"label\":\"Size Recommendation Scope\",\"type\":2,\"isHiddenWhenLocked\":true,\"typeSettings\":{\"additionalResourceOptions\":[]},\"jsonData\":\"[\\r\\n    { \\\"value\\\":\\\"yes\\\", \\\"label\\\": \\\"Same Family Only\\\", \\\"selected\\\":false },\\r\\n    { \\\"value\\\":\\\"no\\\", \\\"label\\\": \\\"All VM Sizes\\\", \\\"selected\\\":true}\\r\\n]\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\"}],\"style\":\"pills\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\"},\"name\":\"parameters - 2\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart={PeakHourStart};\\r\\nlet workend={PeakHourEnd};\\r\\nlet timezoneoffset=4;\\r\\nlet  vmsize= datatable(Name:string,vcores:int,Ram:int,Disks:int)\\r\\n[\\\"Standard_B1ls\\\",1,512,2,\\r\\n\\\"Standard_B1ms\\\",1,2048,2\\r\\n,\\\"Standard_B1s\\\", 1,1024,2\\r\\n,\\\"Standard_B2ms\\\",2,8192,4\\r\\n,\\\"Standard_B2s\\\", 2,4096,4\\r\\n,\\\"Standard_B4ms\\\",4, 16384,8\\r\\n,\\\"Standard_B8ms\\\",8, 32768,16\\r\\n,\\\"Standard_B12ms\\\",12, 49152,16\\r\\n,\\\"Standard_B16ms\\\",16, 65536,32\\r\\n,\\\"Standard_B20ms\\\",20, 81920,32\\r\\n,\\\"Standard_D1_v2\\\",1,3584,4\\r\\n,\\\"Standard_D2_v2\\\",2,7168,8\\r\\n,\\\"Standard_D3_v2\\\",4, 14336,16\\r\\n,\\\"Standard_D4_v2\\\",8, 28672,32\\r\\n,\\\"Standard_D5_v2\\\",16, 57344,64\\r\\n,\\\"Standard_D11_v2\\\",2, 14336,8\\r\\n,\\\"Standard_D12_v2\\\",4, 28672,16\\r\\n,\\\"Standard_D13_v2\\\",8, 57344,32\\r\\n,\\\"Standard_D14_v2\\\",16,114688,64\\r\\n,\\\"Standard_D2_v2_Promo\\\",2,7168,8\\r\\n,\\\"Standard_D3_v2_Promo\\\",4, 14336,16\\r\\n,\\\"Standard_D4_v2_Promo\\\",8, 28672,32\\r\\n,\\\"Standard_D5_v2_Promo\\\", 16, 57344,64\\r\\n,\\\"Standard_D11_v2_Promo\\\", 2, 14336,8\\r\\n,\\\"Standard_D12_v2_Promo\\\", 4, 28672,16\\r\\n,\\\"Standard_D13_v2_Promo\\\", 8, 57344,32\\r\\n,\\\"Standard_D14_v2_Promo\\\",16,114688,64\\r\\n,\\\"Standard_F1\\\",1,2048,4\\r\\n,\\\"Standard_F2\\\",2,4096,8\\r\\n,\\\"Standard_F4\\\",4,8192,16\\r\\n,\\\"Standard_F8\\\",8, 16384,32\\r\\n,\\\"Standard_F16\\\",16, 32768,64\\r\\n,\\\"Standard_DS1_v2\\\",1,3584,4\\r\\n,\\\"Standard_DS2_v2\\\",2,7168,8\\r\\n,\\\"Standard_DS3_v2\\\",4, 14336,16\\r\\n,\\\"Standard_DS4_v2\\\",8, 28672,32\\r\\n,\\\"Standard_DS5_v2\\\",16, 57344,64\\r\\n,\\\"Standard_DS11-1_v2\\\", 2, 14336,8\\r\\n,\\\"Standard_DS11_v2\\\",2, 14336,8\\r\\n,\\\"Standard_DS12-1_v2\\\", 4, 28672,16\\r\\n,\\\"Standard_DS12-2_v2\\\", 4, 28672,16\\r\\n,\\\"Standard_DS12_v2\\\",4, 28672,16\\r\\n,\\\"Standard_DS13-2_v2\\\", 8, 57344,32\\r\\n,\\\"Standard_DS13-4_v2\\\", 8, 57344,32\\r\\n,\\\"Standard_DS13_v2\\\",8, 57344,32\\r\\n,\\\"Standard_DS14-4_v2\\\",16,114688,64\\r\\n,\\\"Standard_DS14-8_v2\\\",16,114688,64\\r\\n,\\\"Standard_DS14_v2\\\",16,114688,64\\r\\n,\\\"Standard_DS2_v2_Promo\\\", 2,7168,8\\r\\n,\\\"Standard_DS3_v2_Promo\\\", 4, 14336,16\\r\\n,\\\"Standard_DS4_v2_Promo\\\", 8, 28672,32\\r\\n,\\\"Standard_DS5_v2_Promo\\\",16, 57344,64\\r\\n,\\\"Standard_DS11_v2_Promo\\\",2, 14336,8\\r\\n,\\\"Standard_DS12_v2_Promo\\\",4, 28672,16\\r\\n,\\\"Standard_DS13_v2_Promo\\\",8, 57344,32\\r\\n,\\\"Standard_DS14_v2_Promo\\\",16,114688,64\\r\\n,\\\"Standard_F1s\\\", 1,2048,4\\r\\n,\\\"Standard_F2s\\\", 2,4096,8\\r\\n,\\\"Standard_F4s\\\", 4,8192,16\\r\\n,\\\"Standard_F8s\\\", 8, 16384,32\\r\\n,\\\"Standard_F16c\\\",16, 32768,64\\r\\n,\\\"Standard_A1_v2\\\",1,2048,2\\r\\n,\\\"Standard_A2m_v2\\\",2, 16384,4\\r\\n,\\\"Standard_A2_v2\\\",2,4096,4\\r\\n,\\\"Standard_A4m_v2\\\",4, 32768,8\\r\\n,\\\"Standard_A4_v2\\\",4,8192,8\\r\\n,\\\"Standard_A8m_v2\\\",8, 65536,16\\r\\n,\\\"Standard_A8_v2\\\",8, 16384,16\\r\\n,\\\"Standard_D2_v3\\\",2,8192,4\\r\\n,\\\"Standard_D4_v3\\\",4, 16384,8\\r\\n,\\\"Standard_D8_v3\\\",8, 32768,16\\r\\n,\\\"Standard_D16_v3\\\",16, 65536,32\\r\\n,\\\"Standard_D32_v3\\\",32,131072,32\\r\\n,\\\"Standard_D48_v3\\\",48,196608,32\\r\\n,\\\"Standard_D64_v3\\\",64,262144,32\\r\\n,\\\"Standard_D2s_v3\\\",2,8192,4\\r\\n,\\\"Standard_D4s_v3\\\",4, 16384,8\\r\\n,\\\"Standard_D8s_v3\\\",8, 32768,16\\r\\n,\\\"Standard_D16s_v3\\\",16, 65536,32\\r\\n,\\\"Standard_D32s_v3\\\",32,131072,32\\r\\n,\\\"Standard_D48s_v3\\\",48,196608,32\\r\\n,\\\"Standard_D64s_v3\\\",64,262144,32\\r\\n,\\\"Standard_E2_v3\\\",2, 16384,4\\r\\n,\\\"Standard_E4_v3\\\",4, 32768,8\\r\\n,\\\"Standard_E8_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E16_v3\\\",16,131072,32\\r\\n,\\\"Standard_E20_v3\\\",20,163840,32\\r\\n,\\\"Standard_E32_v3\\\",32,262144,32\\r\\n,\\\"Standard_E2s_v3\\\",2, 16384,4\\r\\n,\\\"Standard_E4-2s_v3\\\",4, 32768,8\\r\\n,\\\"Standard_E4s_v3\\\",4, 32768,8\\r\\n,\\\"Standard_E8-2s_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E8-4s_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E8s_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E16-4s_v3\\\",16,131072,32\\r\\n,\\\"Standard_E16-8s_v3\\\",16,131072,32\\r\\n,\\\"Standard_E16s_v3\\\",16,131072,32\\r\\n,\\\"Standard_E20s_v3\\\",20,163840,32\\r\\n,\\\"Standard_E32-8s_v3\\\",32,262144,32\\r\\n,\\\"Standard_E32-16s_v3\\\",32,262144,32\\r\\n,\\\"Standard_E32s_v3\\\",32,262144,32\\r\\n,\\\"Standard_A0\\\",1,768,1\\r\\n,\\\"Standard_A1\\\",1,1792,2\\r\\n,\\\"Standard_A2\\\",2,3584,4\\r\\n,\\\"Standard_A3\\\",4,7168,8\\r\\n,\\\"Standard_A5\\\",2, 14336,4\\r\\n,\\\"Standard_A4\\\",8, 14336,16\\r\\n,\\\"Standard_A6\\\",4, 28672,8\\r\\n,\\\"Standard_A7\\\",8, 57344,16\\r\\n,\\\"Basic_A0\\\",1,768,1\\r\\n,\\\"Basic_A1\\\",1,1792,2\\r\\n,\\\"Basic_A2\\\",2,3584,4\\r\\n,\\\"Basic_A3\\\",4,7168,8\\r\\n,\\\"Basic_A4\\\",8, 14336,16\\r\\n,\\\"Standard_D15_v2\\\",20,143360,64\\r\\n,\\\"Standard_E48_v3\\\",48,393216,32\\r\\n,\\\"Standard_E64i_v3\\\",64,442368,32\\r\\n,\\\"Standard_E64_v3\\\",64,442368,32\\r\\n,\\\"Standard_E48s_v3\\\",48,393216,32\\r\\n,\\\"Standard_E64-16s_v3\\\",64,442368,32\\r\\n,\\\"Standard_E64-32s_v3\\\",64,442368,32\\r\\n,\\\"Standard_E64is_v3\\\", 64,442368,32\\r\\n,\\\"Standard_E64s_v3\\\",64,442368,32\\r\\n,\\\"Standard_DS15_v2\\\",20,143360,64\\r\\n,\\\"Standard_D1\\\",1,3584,4\\r\\n,\\\"Standard_D2\\\",2,7168,8\\r\\n,\\\"Standard_D3\\\",4, 14336,16\\r\\n,\\\"Standard_D4\\\",8, 28672,32\\r\\n,\\\"Standard_D11\\\", 2, 14336,8\\r\\n,\\\"Standard_D12\\\", 4, 28672,16\\r\\n,\\\"Standard_D13\\\", 8, 57344,32\\r\\n,\\\"Standard_D14\\\",16,114688,64\\r\\n,\\\"Standard_L8s_v2\\\",8, 65536,16\\r\\n,\\\"Standard_L16s_v2\\\",16,131072,32\\r\\n,\\\"Standard_L32s_v2\\\",32,262144,32\\r\\n,\\\"Standard_L48s_v2\\\",48,393216,32\\r\\n,\\\"Standard_L64s_v2\\\",64,524288,32\\r\\n,\\\"Standard_L80s_v2\\\",80,655360,32\\r\\n,\\\"Standard_NC6s_v3\\\",6,114688,12\\r\\n,\\\"Standard_NC12s_v3\\\", 12,229376,24\\r\\n,\\\"Standard_NC24rs_v3\\\",24,458752,32\\r\\n,\\\"Standard_NC24s_v3\\\", 24,458752,32\\r\\n,\\\"Standard_G1\\\",2, 28672,8\\r\\n,\\\"Standard_G2\\\",4, 57344,16\\r\\n,\\\"Standard_G3\\\",8,114688,32\\r\\n,\\\"Standard_G4\\\", 16,229376,64\\r\\n,\\\"Standard_G5\\\", 32,458752,64\\r\\n,\\\"Standard_GS1\\\", 2, 28672,8\\r\\n,\\\"Standard_GS2\\\", 4, 57344,16\\r\\n,\\\"Standard_GS3\\\", 8,114688,32\\r\\n,\\\"Standard_GS4\\\",16,229376,64\\r\\n,\\\"Standard_GS4-4\\\",16,229376,64\\r\\n,\\\"Standard_GS4-8\\\",16,229376,64\\r\\n,\\\"Standard_GS5\\\",32,458752,64\\r\\n,\\\"Standard_GS5-8\\\",32,458752,64\\r\\n,\\\"Standard_GS5-16\\\",32,458752,64\\r\\n,\\\"Standard_L4s\\\", 4, 32768,16\\r\\n,\\\"Standard_L8s\\\", 8, 65536,32\\r\\n,\\\"Standard_L16c\\\",16,131072,64\\r\\n,\\\"Standard_L32c\\\",32,262144,64\\r\\n,\\\"Standard_M208ms_v2\\\",208 ,   5836800,64\\r\\n,\\\"Standard_M208s_v2\\\",208  ,  2918400,64\\r\\n,\\\"Standard_M416s_v2\\\",416  ,  5836800,64\\r\\n,\\\"Standard_M416ms_v2\\\",416 ,  11673600,64\\r\\n,\\\"Standard_D2a_v4\\\",2,8192,4\\r\\n,\\\"Standard_D4a_v4\\\",4, 16384,8\\r\\n,\\\"Standard_D8a_v4\\\",8, 32768,16\\r\\n,\\\"Standard_D16a_v4\\\",16, 65536,32\\r\\n,\\\"Standard_D32a_v4\\\",32,131072,32\\r\\n,\\\"Standard_D48a_v4\\\",48,196608,32\\r\\n,\\\"Standard_D64a_v4\\\",64,262144,32\\r\\n,\\\"Standard_D96a_v4\\\",96,393216,32\\r\\n,\\\"Standard_D2as_v4\\\",2,8192,4\\r\\n,\\\"Standard_D4as_v4\\\",4, 16384,8\\r\\n,\\\"Standard_D8as_v4\\\",8, 32768,16\\r\\n,\\\"Standard_D16as_v4\\\", 16, 65536,32\\r\\n,\\\"Standard_D32as_v4\\\", 32,131072,32\\r\\n,\\\"Standard_D48as_v4\\\", 48,196608,32\\r\\n,\\\"Standard_D64as_v4\\\", 64,262144,32\\r\\n,\\\"Standard_D96as_v4\\\", 96,393216,32\\r\\n,\\\"Standard_E2a_v4\\\",2, 16384,4\\r\\n,\\\"Standard_E4a_v4\\\",4, 32768,8\\r\\n,\\\"Standard_E8a_v4\\\",8, 65536,16\\r\\n,\\\"Standard_E16a_v4\\\",16,131072,32\\r\\n,\\\"Standard_E20a_v4\\\",20,163840,32\\r\\n,\\\"Standard_E32a_v4\\\",32,262144,32\\r\\n,\\\"Standard_E48a_v4\\\",48,393216,32\\r\\n,\\\"Standard_E64a_v4\\\",64,442368,32\\r\\n,\\\"Standard_E96a_v4\\\",96,688128,32\\r\\n,\\\"Standard_E2as_v4\\\",2, 16384,4\\r\\n,\\\"Standard_E4as_v4\\\",4, 32768,8\\r\\n,\\\"Standard_E8as_v4\\\",8, 65536,16\\r\\n,\\\"Standard_E16as_v4\\\", 16,131072,32\\r\\n,\\\"Standard_E20as_v4\\\", 20,163840,32\\r\\n,\\\"Standard_E32as_v4\\\", 32,262144,32\\r\\n,\\\"Standard_E48as_v4\\\", 48,393216,32\\r\\n,\\\"Standard_E64as_v4\\\", 64,442368,32\\r\\n,\\\"Standard_E96as_v4\\\", 96,688128,32\\r\\n,\\\"Standard_NV6\\\", 6, 57344,24\\r\\n,\\\"Standard_NV12\\\",12,114688,48\\r\\n,\\\"Standard_NV24\\\",24,229376,64\\r\\n,\\\"Standard_NV6_Promo\\\", 6, 57344,24\\r\\n,\\\"Standard_NV12_Promo\\\",12,114688,48\\r\\n,\\\"Standard_NV24_Promo\\\",24,229376,64\\r\\n,\\\"Standard_DS1\\\", 1,3584,4\\r\\n,\\\"Standard_DS2\\\", 2,7168,8\\r\\n,\\\"Standard_DS3\\\", 4, 14336,16\\r\\n,\\\"Standard_DS4\\\", 8, 28672,32\\r\\n,\\\"Standard_DS11\\\",2, 14336,8\\r\\n,\\\"Standard_DS12\\\",4, 28672,16\\r\\n,\\\"Standard_DS13\\\",8, 57344,32\\r\\n,\\\"Standard_DS14\\\",16,114688,64\\r\\n,\\\"Standard_NC6\\\", 6, 57344,24\\r\\n,\\\"Standard_NC12\\\",12,114688,48\\r\\n,\\\"Standard_NC24\\\",24,229376,64\\r\\n,\\\"Standard_NC24r\\\",24,229376,64\\r\\n,\\\"Standard_NC6_Promo\\\", 6, 57344,24\\r\\n,\\\"Standard_NC12_Promo\\\",12,114688,48\\r\\n,\\\"Standard_NC24_Promo\\\",24,229376,64\\r\\n,\\\"Standard_NC24r_Promo\\\", 24,229376,64\\r\\n,\\\"Standard_F2s_v2\\\",2,4096,4\\r\\n,\\\"Standard_F4s_v2\\\",4,8192,8\\r\\n,\\\"Standard_F8s_v2\\\",8, 16384,16\\r\\n,\\\"Standard_F16s_v2\\\",16, 32768,32\\r\\n,\\\"Standard_F32s_v2\\\",32, 65536,32\\r\\n,\\\"Standard_F48s_v2\\\",48, 98304,32\\r\\n,\\\"Standard_F64s_v2\\\",64,131072,32\\r\\n,\\\"Standard_F72s_v2\\\",72,147456,32\\r\\n,\\\"Standard_M8-2ms\\\",8,224000,8\\r\\n,\\\"Standard_M8-4ms\\\",8,224000,8\\r\\n,\\\"Standard_M8ms\\\",8,224000,8\\r\\n,\\\"Standard_M16-4mc\\\",16,448000,16\\r\\n,\\\"Standard_M16-8mc\\\",16,448000,16\\r\\n,\\\"Standard_M16ms\\\",16,448000,16\\r\\n,\\\"Standard_M32-8mc\\\",32,896000,32\\r\\n,\\\"Standard_M32-16mc\\\", 32,896000,32\\r\\n,\\\"Standard_M32ls\\\",32,262144,32\\r\\n,\\\"Standard_M32ms\\\",32,896000,32\\r\\n,\\\"Standard_M32ts\\\",32,196608,32\\r\\n,\\\"Standard_M64-16mc\\\", 64   , 1792000,64\\r\\n,\\\"Standard_M64-32mc\\\", 64  ,  1792000,64\\r\\n,\\\"Standard_M64ls\\\",64,524288,64\\r\\n,\\\"Standard_M64ms\\\",64 ,   1792000,64\\r\\n,\\\"Standard_M64s\\\",64,    1024000,64\\r\\n,\\\"Standard_M128-32ms\\\",128  ,  3891200,64\\r\\n,\\\"Standard_M128-64ms\\\",128,    3891200,64\\r\\n,\\\"Standard_M128ms\\\",128 ,   3891200,64\\r\\n,\\\"Standard_M128c\\\",128 ,   2048000,64\\r\\n,\\\"Standard_M64\\\",64 ,   1024000,64\\r\\n,\\\"Standard_M64m\\\",64,    1792000,64\\r\\n,\\\"Standard_M128\\\",128  ,  2048000,64\\r\\n,\\\"Standard_M128m\\\",128 ,   3891200,64\\r\\n,\\\"Standard_PB6s\\\",6,114688,12\\r\\n,\\\"Standard_HB60rs\\\",60,228881,4\\r\\n,\\\"Standard_HB120rs_v2\\\", 120,480000,8\\r\\n,\\\"Standard_H8\\\",8, 57344,32\\r\\n,\\\"Standard_H8_Promo\\\",8, 57344,32\\r\\n,\\\"Standard_H16\\\",16,114688,64\\r\\n,\\\"Standard_H16_Promo\\\",16,114688,64\\r\\n,\\\"Standard_H8m\\\", 8,114688,32\\r\\n,\\\"Standard_H8m_Promo\\\", 8,114688,32\\r\\n,\\\"Standard_H16m\\\",16,229376,64\\r\\n,\\\"Standard_H16m_Promo\\\",16,229376,64\\r\\n,\\\"Standard_H16r\\\",16,114688,64\\r\\n,\\\"Standard_H16r_Promo\\\",16,114688,64\\r\\n,\\\"Standard_H16mr\\\",16,229376,64\\r\\n,\\\"Standard_H16mr_Promo\\\", 16,229376,64\\r\\n,\\\"Standard_ND6s\\\",6,114688,12\\r\\n,\\\"Standard_ND12s\\\",12,229376,24\\r\\n,\\\"Standard_ND24rc\\\",24,458752,32\\r\\n,\\\"Standard_ND24s\\\",24,458752,32\\r\\n,\\\"Standard_NC6s_v2\\\",6,114688,12\\r\\n,\\\"Standard_NC12s_v2\\\", 12,229376,24\\r\\n,\\\"Standard_NC24rs_v2\\\",24,458752,32\\r\\n,\\\"Standard_NC24s_v2\\\", 24,458752,32\\r\\n,\\\"Standard_ND40rs_v2\\\",40,688128,8\\r\\n,\\\"Standard_HC44rc\\\",44,335693,4\\r\\n,\\\"Standard_NV4as_v4\\\",4, 14336,8\\r\\n,\\\"Standard_NV8as_v4\\\",8, 28672,16\\r\\n,\\\"Standard_NV16as_v4\\\",16, 57344,32\\r\\n,\\\"Standard_NV32as_v4\\\",32,114688,32\\r\\n,\\\"Standard_DC2s\\\",2,8192,2\\r\\n,\\\"Standard_DC4s\\\",4, 16384,4\\r\\n,\\\"Standard_NP10s\\\",10,172032,8\\r\\n,\\\"Standard_NP20s\\\",20,344064,16\\r\\n,\\\"Standard_NP40s\\\",40,688128,32\\r\\n,\\\"Standard_NV6s_v2\\\",6,114688,12\\r\\n,\\\"Standard_NV12s_v2\\\", 12,229376,24\\r\\n,\\\"Standard_NV24s_v2\\\", 24,458752,32\\r\\n,\\\"Standard_NV12s_v3\\\", 12,114688,12\\r\\n,\\\"Standard_NV24s_v3\\\", 24,229376,24\\r\\n,\\\"Standard_NV48s_v3\\\", 48,458752,32\\r\\n,\\\"Standard_A8\\\",8, 57344,32\\r\\n,\\\"Standard_A9\\\", 16,114688,64\\r\\n,\\\"Standard_A10\\\", 8, 57344,32\\r\\n,\\\"Standard_A11\\\",16,114688,64];\\r\\nlet cpu=Perf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where CounterName == \\\"% Processor Time\\\" \\r\\n| where InstanceName == \\\"_Total\\\" \\r\\n| where ObjectName == \\\"Processor\\\" \\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(CounterValue,50,95),cpu_avg=avg(CounterValue) by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nPerf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where CounterName startswith \\\"Available MBytes\\\"  \\r\\n| where ObjectName == \\\"Memory\\\" \\r\\n|summarize (mem_p95)=percentiles(CounterValue,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet iops=\\r\\nPerf\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where CounterName == \\\"Disk Transfers/sec\\\" \\r\\n| where InstanceName == \\\"_Total\\\" \\r\\n| where ObjectName contains \\\"disk\\\" \\r\\n|summarize (iops_p95)=percentiles(CounterValue,95) by  Computer, ResourceId=_ResourceId;\\r\\n   cpu\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on ResourceId\\r\\n|project Computer,  cpu_p95, mem_p95 , iops_p95 ,ResourceId\\r\\n| extend cpu_resize=iff(cpu_p95<toint(\\\"{CPUThreshold}\\\")  ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend mem_resize=iff(mem_p95<toint(\\\"{MEMThreshold}\\\") ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend  CanResize=iff(cpu_resize ==\\\"yes\\\" and mem_resize==\\\"yes\\\"  , \\\"Resizing Possible\\\",\\\"Resizing not Possible\\\")\\r\\n| project ResourceId,  cpu_p95, mem_p95, iops_p95, cpu_resize, mem_resize, Computer\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":1,\"title\":\"VM Usage with Resize Options\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"crossComponentResources\":[\"{Workspace}\"],\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"cpu_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"iops_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"cpu_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"mem_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"iops_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}}],\"labelSettings\":[{\"columnId\":\"ResourceId\"},{\"columnId\":\"cpu_p95\"},{\"columnId\":\"mem_p95\"},{\"columnId\":\"iops_p95\"},{\"columnId\":\"cpu_resize\"},{\"columnId\":\"mem_resize\"}]},\"sortBy\":[]},\"name\":\"query - 1 - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"let workstart=8;\\r\\nlet workend=17;\\r\\nlet timezoneoffset=4;\\r\\nlet  vmsize= datatable(Name:string,vcores:int,Ram:int,Disks:int)\\r\\n[\\\"Standard_B1ls\\\",1,512,2,\\r\\n\\\"Standard_B1ms\\\",1,2048,2\\r\\n,\\\"Standard_B1s\\\", 1,1024,2\\r\\n,\\\"Standard_B2ms\\\",2,8192,4\\r\\n,\\\"Standard_B2s\\\", 2,4096,4\\r\\n,\\\"Standard_B4ms\\\",4, 16384,8\\r\\n,\\\"Standard_B8ms\\\",8, 32768,16\\r\\n,\\\"Standard_B12ms\\\",12, 49152,16\\r\\n,\\\"Standard_B16ms\\\",16, 65536,32\\r\\n,\\\"Standard_B20ms\\\",20, 81920,32\\r\\n,\\\"Standard_D1_v2\\\",1,3584,4\\r\\n,\\\"Standard_D2_v2\\\",2,7168,8\\r\\n,\\\"Standard_D3_v2\\\",4, 14336,16\\r\\n,\\\"Standard_D4_v2\\\",8, 28672,32\\r\\n,\\\"Standard_D5_v2\\\",16, 57344,64\\r\\n,\\\"Standard_D11_v2\\\",2, 14336,8\\r\\n,\\\"Standard_D12_v2\\\",4, 28672,16\\r\\n,\\\"Standard_D13_v2\\\",8, 57344,32\\r\\n,\\\"Standard_D14_v2\\\",16,114688,64\\r\\n,\\\"Standard_D2_v2_Promo\\\",2,7168,8\\r\\n,\\\"Standard_D3_v2_Promo\\\",4, 14336,16\\r\\n,\\\"Standard_D4_v2_Promo\\\",8, 28672,32\\r\\n,\\\"Standard_D5_v2_Promo\\\", 16, 57344,64\\r\\n,\\\"Standard_D11_v2_Promo\\\", 2, 14336,8\\r\\n,\\\"Standard_D12_v2_Promo\\\", 4, 28672,16\\r\\n,\\\"Standard_D13_v2_Promo\\\", 8, 57344,32\\r\\n,\\\"Standard_D14_v2_Promo\\\",16,114688,64\\r\\n,\\\"Standard_F1\\\",1,2048,4\\r\\n,\\\"Standard_F2\\\",2,4096,8\\r\\n,\\\"Standard_F4\\\",4,8192,16\\r\\n,\\\"Standard_F8\\\",8, 16384,32\\r\\n,\\\"Standard_F16\\\",16, 32768,64\\r\\n,\\\"Standard_DS1_v2\\\",1,3584,4\\r\\n,\\\"Standard_DS2_v2\\\",2,7168,8\\r\\n,\\\"Standard_DS3_v2\\\",4, 14336,16\\r\\n,\\\"Standard_DS4_v2\\\",8, 28672,32\\r\\n,\\\"Standard_DS5_v2\\\",16, 57344,64\\r\\n,\\\"Standard_DS11-1_v2\\\", 2, 14336,8\\r\\n,\\\"Standard_DS11_v2\\\",2, 14336,8\\r\\n,\\\"Standard_DS12-1_v2\\\", 4, 28672,16\\r\\n,\\\"Standard_DS12-2_v2\\\", 4, 28672,16\\r\\n,\\\"Standard_DS12_v2\\\",4, 28672,16\\r\\n,\\\"Standard_DS13-2_v2\\\", 8, 57344,32\\r\\n,\\\"Standard_DS13-4_v2\\\", 8, 57344,32\\r\\n,\\\"Standard_DS13_v2\\\",8, 57344,32\\r\\n,\\\"Standard_DS14-4_v2\\\",16,114688,64\\r\\n,\\\"Standard_DS14-8_v2\\\",16,114688,64\\r\\n,\\\"Standard_DS14_v2\\\",16,114688,64\\r\\n,\\\"Standard_DS2_v2_Promo\\\", 2,7168,8\\r\\n,\\\"Standard_DS3_v2_Promo\\\", 4, 14336,16\\r\\n,\\\"Standard_DS4_v2_Promo\\\", 8, 28672,32\\r\\n,\\\"Standard_DS5_v2_Promo\\\",16, 57344,64\\r\\n,\\\"Standard_DS11_v2_Promo\\\",2, 14336,8\\r\\n,\\\"Standard_DS12_v2_Promo\\\",4, 28672,16\\r\\n,\\\"Standard_DS13_v2_Promo\\\",8, 57344,32\\r\\n,\\\"Standard_DS14_v2_Promo\\\",16,114688,64\\r\\n,\\\"Standard_F1s\\\", 1,2048,4\\r\\n,\\\"Standard_F2s\\\", 2,4096,8\\r\\n,\\\"Standard_F4s\\\", 4,8192,16\\r\\n,\\\"Standard_F8s\\\", 8, 16384,32\\r\\n,\\\"Standard_F16c\\\",16, 32768,64\\r\\n,\\\"Standard_A1_v2\\\",1,2048,2\\r\\n,\\\"Standard_A2m_v2\\\",2, 16384,4\\r\\n,\\\"Standard_A2_v2\\\",2,4096,4\\r\\n,\\\"Standard_A4m_v2\\\",4, 32768,8\\r\\n,\\\"Standard_A4_v2\\\",4,8192,8\\r\\n,\\\"Standard_A8m_v2\\\",8, 65536,16\\r\\n,\\\"Standard_A8_v2\\\",8, 16384,16\\r\\n,\\\"Standard_D2_v3\\\",2,8192,4\\r\\n,\\\"Standard_D4_v3\\\",4, 16384,8\\r\\n,\\\"Standard_D8_v3\\\",8, 32768,16\\r\\n,\\\"Standard_D16_v3\\\",16, 65536,32\\r\\n,\\\"Standard_D32_v3\\\",32,131072,32\\r\\n,\\\"Standard_D48_v3\\\",48,196608,32\\r\\n,\\\"Standard_D64_v3\\\",64,262144,32\\r\\n,\\\"Standard_D2s_v3\\\",2,8192,4\\r\\n,\\\"Standard_D4s_v3\\\",4, 16384,8\\r\\n,\\\"Standard_D8s_v3\\\",8, 32768,16\\r\\n,\\\"Standard_D16s_v3\\\",16, 65536,32\\r\\n,\\\"Standard_D32s_v3\\\",32,131072,32\\r\\n,\\\"Standard_D48s_v3\\\",48,196608,32\\r\\n,\\\"Standard_D64s_v3\\\",64,262144,32\\r\\n,\\\"Standard_E2_v3\\\",2, 16384,4\\r\\n,\\\"Standard_E4_v3\\\",4, 32768,8\\r\\n,\\\"Standard_E8_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E16_v3\\\",16,131072,32\\r\\n,\\\"Standard_E20_v3\\\",20,163840,32\\r\\n,\\\"Standard_E32_v3\\\",32,262144,32\\r\\n,\\\"Standard_E2s_v3\\\",2, 16384,4\\r\\n,\\\"Standard_E4-2s_v3\\\",4, 32768,8\\r\\n,\\\"Standard_E4s_v3\\\",4, 32768,8\\r\\n,\\\"Standard_E8-2s_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E8-4s_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E8s_v3\\\",8, 65536,16\\r\\n,\\\"Standard_E16-4s_v3\\\",16,131072,32\\r\\n,\\\"Standard_E16-8s_v3\\\",16,131072,32\\r\\n,\\\"Standard_E16s_v3\\\",16,131072,32\\r\\n,\\\"Standard_E20s_v3\\\",20,163840,32\\r\\n,\\\"Standard_E32-8s_v3\\\",32,262144,32\\r\\n,\\\"Standard_E32-16s_v3\\\",32,262144,32\\r\\n,\\\"Standard_E32s_v3\\\",32,262144,32\\r\\n,\\\"Standard_A0\\\",1,768,1\\r\\n,\\\"Standard_A1\\\",1,1792,2\\r\\n,\\\"Standard_A2\\\",2,3584,4\\r\\n,\\\"Standard_A3\\\",4,7168,8\\r\\n,\\\"Standard_A5\\\",2, 14336,4\\r\\n,\\\"Standard_A4\\\",8, 14336,16\\r\\n,\\\"Standard_A6\\\",4, 28672,8\\r\\n,\\\"Standard_A7\\\",8, 57344,16\\r\\n,\\\"Basic_A0\\\",1,768,1\\r\\n,\\\"Basic_A1\\\",1,1792,2\\r\\n,\\\"Basic_A2\\\",2,3584,4\\r\\n,\\\"Basic_A3\\\",4,7168,8\\r\\n,\\\"Basic_A4\\\",8, 14336,16\\r\\n,\\\"Standard_D15_v2\\\",20,143360,64\\r\\n,\\\"Standard_E48_v3\\\",48,393216,32\\r\\n,\\\"Standard_E64i_v3\\\",64,442368,32\\r\\n,\\\"Standard_E64_v3\\\",64,442368,32\\r\\n,\\\"Standard_E48s_v3\\\",48,393216,32\\r\\n,\\\"Standard_E64-16s_v3\\\",64,442368,32\\r\\n,\\\"Standard_E64-32s_v3\\\",64,442368,32\\r\\n,\\\"Standard_E64is_v3\\\", 64,442368,32\\r\\n,\\\"Standard_E64s_v3\\\",64,442368,32\\r\\n,\\\"Standard_DS15_v2\\\",20,143360,64\\r\\n,\\\"Standard_D1\\\",1,3584,4\\r\\n,\\\"Standard_D2\\\",2,7168,8\\r\\n,\\\"Standard_D3\\\",4, 14336,16\\r\\n,\\\"Standard_D4\\\",8, 28672,32\\r\\n,\\\"Standard_D11\\\", 2, 14336,8\\r\\n,\\\"Standard_D12\\\", 4, 28672,16\\r\\n,\\\"Standard_D13\\\", 8, 57344,32\\r\\n,\\\"Standard_D14\\\",16,114688,64\\r\\n,\\\"Standard_L8s_v2\\\",8, 65536,16\\r\\n,\\\"Standard_L16s_v2\\\",16,131072,32\\r\\n,\\\"Standard_L32s_v2\\\",32,262144,32\\r\\n,\\\"Standard_L48s_v2\\\",48,393216,32\\r\\n,\\\"Standard_L64s_v2\\\",64,524288,32\\r\\n,\\\"Standard_L80s_v2\\\",80,655360,32\\r\\n,\\\"Standard_NC6s_v3\\\",6,114688,12\\r\\n,\\\"Standard_NC12s_v3\\\", 12,229376,24\\r\\n,\\\"Standard_NC24rs_v3\\\",24,458752,32\\r\\n,\\\"Standard_NC24s_v3\\\", 24,458752,32\\r\\n,\\\"Standard_G1\\\",2, 28672,8\\r\\n,\\\"Standard_G2\\\",4, 57344,16\\r\\n,\\\"Standard_G3\\\",8,114688,32\\r\\n,\\\"Standard_G4\\\", 16,229376,64\\r\\n,\\\"Standard_G5\\\", 32,458752,64\\r\\n,\\\"Standard_GS1\\\", 2, 28672,8\\r\\n,\\\"Standard_GS2\\\", 4, 57344,16\\r\\n,\\\"Standard_GS3\\\", 8,114688,32\\r\\n,\\\"Standard_GS4\\\",16,229376,64\\r\\n,\\\"Standard_GS4-4\\\",16,229376,64\\r\\n,\\\"Standard_GS4-8\\\",16,229376,64\\r\\n,\\\"Standard_GS5\\\",32,458752,64\\r\\n,\\\"Standard_GS5-8\\\",32,458752,64\\r\\n,\\\"Standard_GS5-16\\\",32,458752,64\\r\\n,\\\"Standard_L4s\\\", 4, 32768,16\\r\\n,\\\"Standard_L8s\\\", 8, 65536,32\\r\\n,\\\"Standard_L16c\\\",16,131072,64\\r\\n,\\\"Standard_L32c\\\",32,262144,64\\r\\n,\\\"Standard_M208ms_v2\\\",208 ,   5836800,64\\r\\n,\\\"Standard_M208s_v2\\\",208  ,  2918400,64\\r\\n,\\\"Standard_M416s_v2\\\",416  ,  5836800,64\\r\\n,\\\"Standard_M416ms_v2\\\",416 ,  11673600,64\\r\\n,\\\"Standard_D2a_v4\\\",2,8192,4\\r\\n,\\\"Standard_D4a_v4\\\",4, 16384,8\\r\\n,\\\"Standard_D8a_v4\\\",8, 32768,16\\r\\n,\\\"Standard_D16a_v4\\\",16, 65536,32\\r\\n,\\\"Standard_D32a_v4\\\",32,131072,32\\r\\n,\\\"Standard_D48a_v4\\\",48,196608,32\\r\\n,\\\"Standard_D64a_v4\\\",64,262144,32\\r\\n,\\\"Standard_D96a_v4\\\",96,393216,32\\r\\n,\\\"Standard_D2as_v4\\\",2,8192,4\\r\\n,\\\"Standard_D4as_v4\\\",4, 16384,8\\r\\n,\\\"Standard_D8as_v4\\\",8, 32768,16\\r\\n,\\\"Standard_D16as_v4\\\", 16, 65536,32\\r\\n,\\\"Standard_D32as_v4\\\", 32,131072,32\\r\\n,\\\"Standard_D48as_v4\\\", 48,196608,32\\r\\n,\\\"Standard_D64as_v4\\\", 64,262144,32\\r\\n,\\\"Standard_D96as_v4\\\", 96,393216,32\\r\\n,\\\"Standard_E2a_v4\\\",2, 16384,4\\r\\n,\\\"Standard_E4a_v4\\\",4, 32768,8\\r\\n,\\\"Standard_E8a_v4\\\",8, 65536,16\\r\\n,\\\"Standard_E16a_v4\\\",16,131072,32\\r\\n,\\\"Standard_E20a_v4\\\",20,163840,32\\r\\n,\\\"Standard_E32a_v4\\\",32,262144,32\\r\\n,\\\"Standard_E48a_v4\\\",48,393216,32\\r\\n,\\\"Standard_E64a_v4\\\",64,442368,32\\r\\n,\\\"Standard_E96a_v4\\\",96,688128,32\\r\\n,\\\"Standard_E2as_v4\\\",2, 16384,4\\r\\n,\\\"Standard_E4as_v4\\\",4, 32768,8\\r\\n,\\\"Standard_E8as_v4\\\",8, 65536,16\\r\\n,\\\"Standard_E16as_v4\\\", 16,131072,32\\r\\n,\\\"Standard_E20as_v4\\\", 20,163840,32\\r\\n,\\\"Standard_E32as_v4\\\", 32,262144,32\\r\\n,\\\"Standard_E48as_v4\\\", 48,393216,32\\r\\n,\\\"Standard_E64as_v4\\\", 64,442368,32\\r\\n,\\\"Standard_E96as_v4\\\", 96,688128,32\\r\\n,\\\"Standard_NV6\\\", 6, 57344,24\\r\\n,\\\"Standard_NV12\\\",12,114688,48\\r\\n,\\\"Standard_NV24\\\",24,229376,64\\r\\n,\\\"Standard_NV6_Promo\\\", 6, 57344,24\\r\\n,\\\"Standard_NV12_Promo\\\",12,114688,48\\r\\n,\\\"Standard_NV24_Promo\\\",24,229376,64\\r\\n,\\\"Standard_DS1\\\", 1,3584,4\\r\\n,\\\"Standard_DS2\\\", 2,7168,8\\r\\n,\\\"Standard_DS3\\\", 4, 14336,16\\r\\n,\\\"Standard_DS4\\\", 8, 28672,32\\r\\n,\\\"Standard_DS11\\\",2, 14336,8\\r\\n,\\\"Standard_DS12\\\",4, 28672,16\\r\\n,\\\"Standard_DS13\\\",8, 57344,32\\r\\n,\\\"Standard_DS14\\\",16,114688,64\\r\\n,\\\"Standard_NC6\\\", 6, 57344,24\\r\\n,\\\"Standard_NC12\\\",12,114688,48\\r\\n,\\\"Standard_NC24\\\",24,229376,64\\r\\n,\\\"Standard_NC24r\\\",24,229376,64\\r\\n,\\\"Standard_NC6_Promo\\\", 6, 57344,24\\r\\n,\\\"Standard_NC12_Promo\\\",12,114688,48\\r\\n,\\\"Standard_NC24_Promo\\\",24,229376,64\\r\\n,\\\"Standard_NC24r_Promo\\\", 24,229376,64\\r\\n,\\\"Standard_F2s_v2\\\",2,4096,4\\r\\n,\\\"Standard_F4s_v2\\\",4,8192,8\\r\\n,\\\"Standard_F8s_v2\\\",8, 16384,16\\r\\n,\\\"Standard_F16s_v2\\\",16, 32768,32\\r\\n,\\\"Standard_F32s_v2\\\",32, 65536,32\\r\\n,\\\"Standard_F48s_v2\\\",48, 98304,32\\r\\n,\\\"Standard_F64s_v2\\\",64,131072,32\\r\\n,\\\"Standard_F72s_v2\\\",72,147456,32\\r\\n,\\\"Standard_M8-2ms\\\",8,224000,8\\r\\n,\\\"Standard_M8-4ms\\\",8,224000,8\\r\\n,\\\"Standard_M8ms\\\",8,224000,8\\r\\n,\\\"Standard_M16-4mc\\\",16,448000,16\\r\\n,\\\"Standard_M16-8mc\\\",16,448000,16\\r\\n,\\\"Standard_M16ms\\\",16,448000,16\\r\\n,\\\"Standard_M32-8mc\\\",32,896000,32\\r\\n,\\\"Standard_M32-16mc\\\", 32,896000,32\\r\\n,\\\"Standard_M32ls\\\",32,262144,32\\r\\n,\\\"Standard_M32ms\\\",32,896000,32\\r\\n,\\\"Standard_M32ts\\\",32,196608,32\\r\\n,\\\"Standard_M64-16mc\\\", 64   , 1792000,64\\r\\n,\\\"Standard_M64-32mc\\\", 64  ,  1792000,64\\r\\n,\\\"Standard_M64ls\\\",64,524288,64\\r\\n,\\\"Standard_M64ms\\\",64 ,   1792000,64\\r\\n,\\\"Standard_M64s\\\",64,    1024000,64\\r\\n,\\\"Standard_M128-32ms\\\",128  ,  3891200,64\\r\\n,\\\"Standard_M128-64ms\\\",128,    3891200,64\\r\\n,\\\"Standard_M128ms\\\",128 ,   3891200,64\\r\\n,\\\"Standard_M128c\\\",128 ,   2048000,64\\r\\n,\\\"Standard_M64\\\",64 ,   1024000,64\\r\\n,\\\"Standard_M64m\\\",64,    1792000,64\\r\\n,\\\"Standard_M128\\\",128  ,  2048000,64\\r\\n,\\\"Standard_M128m\\\",128 ,   3891200,64\\r\\n,\\\"Standard_PB6s\\\",6,114688,12\\r\\n,\\\"Standard_HB60rs\\\",60,228881,4\\r\\n,\\\"Standard_HB120rs_v2\\\", 120,480000,8\\r\\n,\\\"Standard_H8\\\",8, 57344,32\\r\\n,\\\"Standard_H8_Promo\\\",8, 57344,32\\r\\n,\\\"Standard_H16\\\",16,114688,64\\r\\n,\\\"Standard_H16_Promo\\\",16,114688,64\\r\\n,\\\"Standard_H8m\\\", 8,114688,32\\r\\n,\\\"Standard_H8m_Promo\\\", 8,114688,32\\r\\n,\\\"Standard_H16m\\\",16,229376,64\\r\\n,\\\"Standard_H16m_Promo\\\",16,229376,64\\r\\n,\\\"Standard_H16r\\\",16,114688,64\\r\\n,\\\"Standard_H16r_Promo\\\",16,114688,64\\r\\n,\\\"Standard_H16mr\\\",16,229376,64\\r\\n,\\\"Standard_H16mr_Promo\\\", 16,229376,64\\r\\n,\\\"Standard_ND6s\\\",6,114688,12\\r\\n,\\\"Standard_ND12s\\\",12,229376,24\\r\\n,\\\"Standard_ND24rc\\\",24,458752,32\\r\\n,\\\"Standard_ND24s\\\",24,458752,32\\r\\n,\\\"Standard_NC6s_v2\\\",6,114688,12\\r\\n,\\\"Standard_NC12s_v2\\\", 12,229376,24\\r\\n,\\\"Standard_NC24rs_v2\\\",24,458752,32\\r\\n,\\\"Standard_NC24s_v2\\\", 24,458752,32\\r\\n,\\\"Standard_ND40rs_v2\\\",40,688128,8\\r\\n,\\\"Standard_HC44rc\\\",44,335693,4\\r\\n,\\\"Standard_NV4as_v4\\\",4, 14336,8\\r\\n,\\\"Standard_NV8as_v4\\\",8, 28672,16\\r\\n,\\\"Standard_NV16as_v4\\\",16, 57344,32\\r\\n,\\\"Standard_NV32as_v4\\\",32,114688,32\\r\\n,\\\"Standard_DC2s\\\",2,8192,2\\r\\n,\\\"Standard_DC4s\\\",4, 16384,4\\r\\n,\\\"Standard_NP10s\\\",10,172032,8\\r\\n,\\\"Standard_NP20s\\\",20,344064,16\\r\\n,\\\"Standard_NP40s\\\",40,688128,32\\r\\n,\\\"Standard_NV6s_v2\\\",6,114688,12\\r\\n,\\\"Standard_NV12s_v2\\\", 12,229376,24\\r\\n,\\\"Standard_NV24s_v2\\\", 24,458752,32\\r\\n,\\\"Standard_NV12s_v3\\\", 12,114688,12\\r\\n,\\\"Standard_NV24s_v3\\\", 24,229376,24\\r\\n,\\\"Standard_NV48s_v3\\\", 48,458752,32\\r\\n,\\\"Standard_A8\\\",8, 57344,32\\r\\n,\\\"Standard_A9\\\", 16,114688,64\\r\\n,\\\"Standard_A10\\\", 8, 57344,32\\r\\n,\\\"Standard_A11\\\",16,114688,64];\\r\\nlet inv=VMComputer\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where AzureSubscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| where tostring(split(_ResourceId,'/')[2])  in ({subscription}) or '*' in ({subscription})\\r\\n| where tostring(split(_ResourceId,'/')[4])  in ({rg}) or '*' in ({rg})\\r\\n| summarize arg_max(TimeGenerated, *) by ResourceId=_ResourceId\\r\\n| project ResourceId , Computer , AzureSize ,Cpus , CpuSpeed ,PhysicalMemoryMB;\\r\\nlet cpu=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where hour between (workstart..workend)\\r\\n| where Namespace == \\\"Processor\\\" \\r\\n| where Name == \\\"UtilizationPercentage\\\"\\r\\n| summarize (cpu_p50,cpu_p95)=percentiles(Val,50,95),cpu_avg=avg(Val) by Computer, ResourceId=_ResourceId;\\r\\nlet mem=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Memory\\\" \\r\\n| where Name == \\\"AvailableMB\\\"\\r\\n|summarize (mem_p95)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet iops=\\r\\nInsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"LogicalDisk\\\" \\r\\n| where Name == \\\"TransfersPerSecond\\\"\\r\\n|summarize (iops_p95)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwsent=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"WriteBytesPerSecond\\\" \\r\\n|summarize (nwsent)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet nwrec=InsightsMetrics\\r\\n| where TimeGenerated {TimeRange}\\r\\n| extend hour=datetime_part(\\\"hour\\\", TimeGenerated)+timezoneoffset\\r\\n| where Namespace == \\\"Network\\\"\\r\\n| where Name == \\\"ReadBytesPerSecond\\\" \\r\\n|summarize (nwrec)=percentiles(Val,95) by  Computer, ResourceId=_ResourceId;\\r\\nlet boot=Syslog\\r\\n| where Facility ==\\\"daemon\\\"\\r\\n| where SyslogMessage startswith \\\"Startup finished\\\" \\r\\n| where ProcessID == 1 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId\\r\\n|union  isfuzzy=true (Event\\r\\n| where TimeGenerated {TimeRange}\\r\\n| where EventLog == \\\"System\\\" \\r\\n| where EventID == 1074 \\r\\n|summarize bootcount=count() by Computer, ResourceId=_ResourceId);\\r\\nlet logons=SecurityEvent\\r\\n| where EventID == 4624\\r\\n| where LogonTypeName  ==\\\"10 - RemoteInteractive\\\" \\r\\n| where Account !contains \\\"Font Driver Host\\\"  and  Account !contains \\\"Window Manager\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId\\r\\n|union  isfuzzy=true (Syslog\\r\\n| where Facility == \\\"auth\\\"\\r\\n| where SyslogMessage startswith \\\"Accepted password for\\\" or SyslogMessage startswith \\\"Accepted publickey for\\\"\\r\\n| summarize ['SSH/RDP']=count() by Computer, ResourceId=_ResourceId);\\r\\nlet vmcon=VMConnection\\r\\n| where Direction == \\\"inbound\\\" \\r\\n| where SourceIp <> \\\"127.0.0.1\\\" \\r\\n| summarize InboundCon=sum(LinksEstablished+LinksTerminated+LinksLive) by Computer, ResourceId=_ResourceId;\\r\\ninv\\r\\n| join kind= leftouter (\\r\\n   cpu\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   mem\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   nwsent\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   nwrec\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   boot\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   logons\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   iops\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmcon\\r\\n) on ResourceId\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n) on $left.AzureSize==$right.Name\\r\\n|project Computer, AzureSize, Cpus,CpuSpeed, cpu_p95, mem_p95 , iops_p95 ,RAM=PhysicalMemoryMB,Disks,maxIops=Disks*500 ,ResourceId\\r\\n| extend VmFamily=tostring(split(AzureSize,'_')[1])\\r\\n| extend Fm1=substring(VmFamily,0,1) \\r\\n| extend Fm2=substring(VmFamily,1,1)\\r\\n| extend Vmfamily=iff(Fm2 matches regex \\\"[0-9]\\\", Fm1, strcat(Fm1,Fm2))\\r\\n| extend cpu_resize=iff(cpu_p95<toint(\\\"{CPUThreshold}\\\") ,\\\"yes\\\", \\\"no\\\")\\r\\n| extend mem_resize=iff((RAM-mem_p95)/RAM*100<40,\\\"yes\\\", \\\"no\\\")\\r\\n| extend iops_resize=iff(iops_p95<(maxIops*0.4),\\\"yes\\\", \\\"no\\\")\\r\\n| extend newcpu= toint(iff (Cpus <= 2,2, Cpus/2))\\r\\n|extend ramneed= RAM-mem_p95+500\\r\\n| extend newram= case(\\r\\nramneed<0,RAM,\\r\\nramneed<1024,1024,\\r\\nramneed<2048,2048,\\r\\nramneed<3584,3584,\\r\\nramneed<4096,4096,\\r\\nramneed<7168,7168,\\r\\nramneed<8192,8192,\\r\\nramneed<14336,14336,\\r\\nramneed<16386,16384,\\r\\nramneed<28672,28672,\\r\\nramneed<32768,32768,0\\r\\n)\\r\\n| join kind= leftouter (\\r\\n   vmsize\\r\\n   | project Name,vcores=toint(vcores),Ram,Disks\\r\\n) on $left.newcpu==$right.vcores\\r\\n| where Ram <= newram and Ram <= RAM  \\r\\n//| where Name !startswith  'Basic' and AzureSize != Name and iff(Vmfamily !startswith \\\"B\\\", Name !contains'_B' , 1==1) \\r\\n| where Name !startswith  'Basic' and AzureSize != Name and  iff(isnotempty(\\\"{usesamefamily}\\\"),Name startswith strcat(\\\"Standard_\\\",Vmfamily),1==1)\\r\\n| summarize possibleSize = makelist(pack('size', strcat(Name , '|',vcores,'|',Ram))) by  ResourceId,AzureSize,Vmfamily, Cpus,CpuSpeed, cpu_p95, mem_p95 , iops_p95 ,RAM,Disks ,cpu_resize, mem_resize ,iops_resize\\r\\n| join kind= leftouter (AzureUsage_CL\\r\\n| where ConsumedService_s == \\\"Microsoft.Compute\\\" \\r\\n| summarize Cost=round(sum(PretaxCost_d),4) by ResourceId=tolower(InstanceId_s),ConsumedService=ConsumedService_s , Subscription=SubscriptionGuid_g , SubscriptionName=SubscriptionName_s  \\r\\n) on ResourceId\\r\\n| join kind = leftouter(\\r\\n    AzureUsage_CL\\r\\n| where TimeGenerated >= ago(1d)\\r\\n| where ConsumedService_s == \\\"Microsoft.Compute\\\" \\r\\n//| where SubscriptionGuid_g in ({subscription}) or '*' in ({subscription})\\r\\n| extend ReservationId = tostring(parse_json(AdditionalInfo_s).ReservationId) \\r\\n| extend ReservationOrderId = tostring(parse_json(AdditionalInfo_s).ReservationOrderId)\\r\\n| extend UsageType = tostring(parse_json(AdditionalInfo_s).UsageType)  \\r\\n| extend VCPUs = tostring(parse_json(AdditionalInfo_s).VCPUs) \\r\\n| extend ServiceType= tostring(parse_json(AdditionalInfo_s).ServiceType) \\r\\n| extend ImageType = tostring(parse_json(AdditionalInfo_s).ImageType) \\r\\n| extend ConsumptionMeter = tostring(parse_json(AdditionalInfo_s).ConsumptionMeter) \\r\\n| where UsageType startswith \\\"ComputeHR\\\"\\r\\n| summarize arg_max(TimeGenerated, *) by  InstanceId_s\\r\\n| where isnotempty(ReservationId)\\r\\n| project ResourceId=InstanceId_s , ReservationId, ServiceType\\r\\n) on ResourceId\\r\\n| project ResourceId ,AzureSize,Vmfamily, Cpus ,RAM,Disks ,cpu_resize, mem_resize ,iops_resize , Cost, SubscriptionName\\r\\n\\r\\n\\r\\n\\r\\n\",\"size\":1,\"title\":\"Size Recomendations with Cost Info\",\"timeContext\":{\"durationMs\":2592000000},\"timeContextFromParameter\":\"TimeRange\",\"queryType\":0,\"resourceType\":\"microsoft.operationalinsights/workspaces\",\"gridSettings\":{\"formatters\":[{\"columnMatch\":\"cpu_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"mem_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"iops_resize\",\"formatter\":18,\"formatOptions\":{\"thresholdsOptions\":\"icons\",\"thresholdsGrid\":[{\"operator\":\"==\",\"thresholdValue\":\"yes\",\"representation\":\"success\",\"text\":\"{0}{1}\"},{\"operator\":\"==\",\"thresholdValue\":\"no\",\"representation\":\"2\",\"text\":\"{0}{1}\"},{\"operator\":\"Default\",\"thresholdValue\":null,\"representation\":\"success\",\"text\":\"{0}{1}\"}]}},{\"columnMatch\":\"Cost\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"currency\":\"USD\",\"style\":\"currency\",\"useGrouping\":false}}},{\"columnMatch\":\"cpu_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"useGrouping\":false,\"maximumFractionDigits\":2}}},{\"columnMatch\":\"mem_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"iops_p95\",\"formatter\":0,\"formatOptions\":{},\"numberFormat\":{\"unit\":0,\"options\":{\"style\":\"decimal\",\"maximumFractionDigits\":2}}},{\"columnMatch\":\"possibleSize\",\"formatter\":7,\"formatOptions\":{\"linkTarget\":\"CellDetails\",\"linkIsContextBlade\":true}}]}},\"conditionalVisibilities\":[{\"parameterName\":\"isusageexist\",\"comparison\":\"isNotEqualTo\"},{\"parameterName\":\"showhidden\",\"comparison\":\"isNotEqualTo\"}],\"showPin\":false,\"name\":\"query - 1 - Copy - Copy\"},{\"type\":1,\"content\":{\"json\":\"## Unused Disks\\r\\n\\r\\nManaged disks can be Attached , Reserved (Attached to an deallocated VM) or Unattached\"},\"name\":\"text - 15\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"where type == \\\"microsoft.compute/disks\\\"\\r\\n| where subscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| project id , location,  sku=tostring(sku.name) , diskSizeGB=toint(properties.diskSizeGB), diskState=tostring(properties.diskState), resourceGroup,OwnerVM=managedBy,subscriptionId \\r\\n| where diskState != \\\"Attached\\\"\\r\\n| sort by diskState\\r\\n\",\"size\":1,\"title\":\"Unused Managed Disks\",\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{subscription}\"]},\"name\":\"query - 13\"}]},\"conditionalVisibility\":{\"parameterName\":\"VMInsightsEnabled\",\"comparison\":\"isEqualTo\"},\"name\":\"PerfData - Copy\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"where type == \\\"microsoft.compute/disks\\\"\\r\\n| where subscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| project id , location,  sku=tostring(sku.name) , diskSizeGB=toint(properties.diskSizeGB), diskState=tostring(properties.diskState), resourceGroup,OwnerVM=managedBy,subscriptionId \\r\\n| where diskState != \\\"Attached\\\"\\r\\n| sort by diskState\\r\\n\",\"size\":1,\"title\":\"Unused Managed Disks\",\"showExportToExcel\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{subscription}\"],\"gridSettings\":{\"rowLimit\":1000}},\"name\":\"query - 13\"},{\"type\":1,\"content\":{\"json\":\"## Public IPs\"},\"name\":\"text - 7\"},{\"type\":3,\"content\":{\"version\":\"KqlItem/1.0\",\"query\":\"where type == \\\"microsoft.network/publicipaddresses\\\"\\r\\n| where subscriptionId in ({subscription:subid}) or '*' in ({subscription:subid})\\r\\n| extend nic=tostring(todynamic(properties).ipConfiguration)\\r\\n| extend sku=tostring(todynamic(sku).name)\\r\\n| where isempty(nic)\\r\\n| project id , name , subscriptionId , sku, location\\r\\n\",\"size\":0,\"title\":\"Unused PIPs\",\"showExportToExcel\":true,\"queryType\":1,\"resourceType\":\"microsoft.resourcegraph/resources\",\"crossComponentResources\":[\"{subscription}\"],\"gridSettings\":{\"rowLimit\":1000}},\"name\":\"UnusedPIP\"}],\"isLocked\":false,\"defaultResourceIds\":[\"/subscriptions/2de20a16-20c6-41af-82cd-bceb39195d1c/resourceGroups/rg-shared-sc-weu/providers/Microsoft.OperationalInsights/workspaces/la-prod-sc-weu\",\"Azure Monitor\"],\"fallbackResourceIds\":[\"/subscriptions/2de20a16-20c6-41af-82cd-bceb39195d1c/resourceGroups/rg-shared-sc-weu/providers/Microsoft.OperationalInsights/workspaces/la-prod-sc-weu\",\"Azure Monitor\"]}",
                    "version": "1.0",
        "sourceId": "[parameters('workbookSourceId')]",
        "category": "[parameters('workbookType')]"
      }
    }
  ],
  "outputs": {
    "workbookId": {
      "type": "string",
      "value": "[resourceId( 'microsoft.insights/workbooks', parameters('workbookId'))]"
    }
  },
  "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#"
}